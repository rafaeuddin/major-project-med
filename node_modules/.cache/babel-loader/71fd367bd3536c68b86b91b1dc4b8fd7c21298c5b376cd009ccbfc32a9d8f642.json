{"ast":null,"code":"import { http, HttpResponse } from 'msw';\n\n// Mock data for appointments\nconst mockAppointments = [{\n  _id: '1',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor456',\n    name: 'Dr. Sarah Parker',\n    specialization: 'Cardiology',\n    email: 'dr.parker@example.com'\n  },\n  date: new Date(Date.now() + 86400000 * 2).toISOString(),\n  // 2 days from now\n  timeSlot: '10:00 AM',\n  status: 'scheduled',\n  reason: 'Annual checkup',\n  notes: ''\n}, {\n  _id: '2',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor789',\n    name: 'Dr. Michael Chen',\n    specialization: 'Neurology',\n    email: 'dr.chen@example.com'\n  },\n  date: new Date(Date.now() - 86400000 * 3).toISOString(),\n  // 3 days ago\n  timeSlot: '2:00 PM',\n  status: 'completed',\n  reason: 'Headaches and dizziness',\n  notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\n}];\n\n// Mock available time slots\nconst mockTimeSlots = {\n  availableTimeSlots: ['09:00 AM', '10:00 AM', '11:00 AM', '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM']\n};\n\n// Simple chatbot responses for common medical inquiries\nconst medicalResponses = {\n  headache: {\n    response: \"It sounds like you're experiencing headaches. Headaches can be caused by various factors including stress, dehydration, lack of sleep, or underlying medical conditions. If your headache is severe, persistent, or accompanied by other symptoms like fever, vision changes, or neck stiffness, you should consult with a doctor. Would you like to book an appointment?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"Neurologist\"\n  },\n  fever: {\n    response: \"I see you're concerned about a fever. A fever is often a sign that your body is fighting an infection. Make sure to stay hydrated and rest. If your temperature is above 103°F (39.4°C), lasts more than three days, or is accompanied by severe symptoms, you should seek medical attention. Would you like to discuss this with a doctor?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"General Physician\"\n  },\n  chest_pain: {\n    response: \"Chest pain can be a symptom of several conditions and should be taken seriously. If you're experiencing severe chest pain, especially if it radiates to your arm, jaw, or back, or is accompanied by shortness of breath, sweating, or nausea, please seek emergency medical care immediately by calling 911 or going to your nearest emergency room.\",\n    urgencyLevel: \"urgent\",\n    specialistRecommendation: \"Cardiologist\"\n  },\n  cough: {\n    response: \"Coughing can be caused by various factors including allergies, cold, flu, or respiratory infections. If your cough is persistent (lasting more than 2 weeks), produces discolored mucus, or is accompanied by shortness of breath, you should consult with a healthcare professional. Would you like me to help you book an appointment?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"Pulmonologist\"\n  },\n  default: {\n    response: \"Thank you for sharing your health concern. While I can provide general information, for a proper diagnosis and treatment plan, I'd recommend consulting with a healthcare professional. Would you like me to help you book an appointment with a doctor?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: null\n  }\n};\nexport const handlers = [\n// Auth handlers\nhttp.post('/api/auth/login', async ({\n  request\n}) => {\n  const {\n    email,\n    password\n  } = await request.json();\n\n  // Mock credentials check\n  if (email === 'doctor@example.com' && password === 'password') {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          _id: 'doctor123',\n          name: 'Dr. John Doe',\n          email: 'doctor@example.com',\n          role: 'doctor'\n        }\n      }\n    });\n  } else if (email === 'patient@example.com' && password === 'password') {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          _id: 'patient123',\n          name: 'Jane Smith',\n          email: 'patient@example.com',\n          role: 'patient'\n        }\n      }\n    });\n  } else {\n    return new HttpResponse(JSON.stringify({\n      success: false,\n      message: 'Invalid credentials'\n    }), {\n      status: 401\n    });\n  }\n}), http.get('/api/auth/me', () => {\n  // Return mock user data\n  return HttpResponse.json({\n    success: true,\n    data: {\n      _id: 'user123',\n      name: 'Mock User',\n      email: 'user@example.com',\n      role: 'patient'\n    }\n  });\n}),\n// Appointment handlers\nhttp.get('/api/appointments', () => {\n  return HttpResponse.json({\n    success: true,\n    data: [{\n      _id: 'appt1',\n      patientId: 'patient123',\n      patientName: 'Jane Smith',\n      doctorId: 'doctor123',\n      doctorName: 'Dr. John Doe',\n      date: '2023-09-15',\n      timeSlot: '10:00 AM',\n      status: 'scheduled',\n      reason: 'Annual checkup',\n      createdAt: '2023-09-01T10:00:00Z'\n    }, {\n      _id: 'appt2',\n      patientId: 'patient123',\n      patientName: 'Jane Smith',\n      doctorId: 'doctor456',\n      doctorName: 'Dr. Sarah Wilson',\n      date: '2023-08-20',\n      timeSlot: '2:00 PM',\n      status: 'completed',\n      reason: 'Follow-up',\n      notes: 'Patient is recovering well.',\n      createdAt: '2023-08-01T14:00:00Z'\n    }]\n  });\n}), http.get('/api/appointments/user', () => {\n  return HttpResponse.json({\n    success: true,\n    appointments: mockAppointments\n  });\n}), http.post('/api/appointments', async ({\n  request\n}) => {\n  const appointment = await request.json();\n  return HttpResponse.json({\n    success: true,\n    data: {\n      _id: 'new-appt-id',\n      ...appointment,\n      status: 'scheduled',\n      createdAt: new Date().toISOString()\n    }\n  });\n}), http.delete('/api/appointments/:id', ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n  return HttpResponse.json({\n    success: true,\n    message: `Appointment ${id} cancelled successfully`\n  });\n}),\n// Doctors handlers\nhttp.get('/api/doctors', () => {\n  return HttpResponse.json({\n    success: true,\n    data: [{\n      _id: 'doctor123',\n      name: 'Dr. John Doe',\n      specialization: 'Cardiologist',\n      consultationFee: 150,\n      availableTimeSlots: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\n    }, {\n      _id: 'doctor456',\n      name: 'Dr. Sarah Wilson',\n      specialization: 'Dermatologist',\n      consultationFee: 120,\n      availableTimeSlots: ['9:30 AM', '10:30 AM', '11:30 AM', '2:30 PM', '3:30 PM']\n    }]\n  });\n}), http.get('/api/doctors/:id/timeslots', ({\n  params,\n  request\n}) => {\n  const {\n    id\n  } = params;\n  const url = new URL(request.url);\n  const date = url.searchParams.get('date');\n  return HttpResponse.json({\n    success: true,\n    data: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\n  });\n}),\n// Available slots endpoint\nhttp.get('/api/appointments/available-slots', ({\n  request\n}) => {\n  const url = new URL(request.url);\n  const date = url.searchParams.get('date');\n  const doctorId = url.searchParams.get('doctorId');\n  return HttpResponse.json({\n    success: true,\n    availableTimeSlots: mockTimeSlots.availableTimeSlots\n  });\n}),\n// Chatbot API endpoint handler\nhttp.post('/api/chatbot/message', async ({\n  request\n}) => {\n  const {\n    message,\n    conversationHistory\n  } = await request.json();\n\n  // Simple keyword-based response for the mock\n  const messageLower = message.toLowerCase();\n  let response;\n  if (messageLower.includes('headache') || messageLower.includes('head pain') || messageLower.includes('migraine')) {\n    response = medicalResponses.headache;\n  } else if (messageLower.includes('fever') || messageLower.includes('temperature') || messageLower.includes('hot')) {\n    response = medicalResponses.fever;\n  } else if (messageLower.includes('chest pain') || messageLower.includes('heart pain')) {\n    response = medicalResponses.chest_pain;\n  } else if (messageLower.includes('cough') || messageLower.includes('cold') || messageLower.includes('flu')) {\n    response = medicalResponses.cough;\n  } else {\n    response = medicalResponses.default;\n  }\n\n  // Add personalization based on conversation history if available\n  if (conversationHistory && conversationHistory.length > 0) {\n    // Find the user's name if mentioned in conversation\n    const nameMatch = conversationHistory.find(msg => msg.role === 'user' && msg.content.match(/my name is ([a-zA-Z]+)/i));\n    if (nameMatch) {\n      const name = nameMatch.content.match(/my name is ([a-zA-Z]+)/i)[1];\n      response.response = `Hi ${name}, ${response.response}`;\n    }\n  }\n  return HttpResponse.json({\n    success: true,\n    data: response\n  });\n})];","map":{"version":3,"names":["http","HttpResponse","mockAppointments","_id","patientId","name","email","phone","doctorId","specialization","date","Date","now","toISOString","timeSlot","status","reason","notes","mockTimeSlots","availableTimeSlots","medicalResponses","headache","response","urgencyLevel","specialistRecommendation","fever","chest_pain","cough","default","handlers","post","request","password","json","success","data","token","user","role","JSON","stringify","message","get","patientName","doctorName","createdAt","appointments","appointment","delete","params","id","consultationFee","url","URL","searchParams","conversationHistory","messageLower","toLowerCase","includes","length","nameMatch","find","msg","content","match"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/mocks/handlers.js"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\n\r\n// Mock data for appointments\r\nconst mockAppointments = [\r\n  {\r\n    _id: '1',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor456',\r\n      name: 'Dr. Sarah Parker',\r\n      specialization: 'Cardiology',\r\n      email: 'dr.parker@example.com'\r\n    },\r\n    date: new Date(Date.now() + 86400000 * 2).toISOString(), // 2 days from now\r\n    timeSlot: '10:00 AM',\r\n    status: 'scheduled',\r\n    reason: 'Annual checkup',\r\n    notes: ''\r\n  },\r\n  {\r\n    _id: '2',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor789',\r\n      name: 'Dr. Michael Chen',\r\n      specialization: 'Neurology',\r\n      email: 'dr.chen@example.com'\r\n    },\r\n    date: new Date(Date.now() - 86400000 * 3).toISOString(), // 3 days ago\r\n    timeSlot: '2:00 PM',\r\n    status: 'completed',\r\n    reason: 'Headaches and dizziness',\r\n    notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\r\n  }\r\n];\r\n\r\n// Mock available time slots\r\nconst mockTimeSlots = {\r\n  availableTimeSlots: [\r\n    '09:00 AM', '10:00 AM', '11:00 AM',\r\n    '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM'\r\n  ]\r\n};\r\n\r\n// Simple chatbot responses for common medical inquiries\r\nconst medicalResponses = {\r\n  headache: {\r\n    response: \"It sounds like you're experiencing headaches. Headaches can be caused by various factors including stress, dehydration, lack of sleep, or underlying medical conditions. If your headache is severe, persistent, or accompanied by other symptoms like fever, vision changes, or neck stiffness, you should consult with a doctor. Would you like to book an appointment?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"Neurologist\"\r\n  },\r\n  fever: {\r\n    response: \"I see you're concerned about a fever. A fever is often a sign that your body is fighting an infection. Make sure to stay hydrated and rest. If your temperature is above 103°F (39.4°C), lasts more than three days, or is accompanied by severe symptoms, you should seek medical attention. Would you like to discuss this with a doctor?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"General Physician\"\r\n  },\r\n  chest_pain: {\r\n    response: \"Chest pain can be a symptom of several conditions and should be taken seriously. If you're experiencing severe chest pain, especially if it radiates to your arm, jaw, or back, or is accompanied by shortness of breath, sweating, or nausea, please seek emergency medical care immediately by calling 911 or going to your nearest emergency room.\",\r\n    urgencyLevel: \"urgent\",\r\n    specialistRecommendation: \"Cardiologist\"\r\n  },\r\n  cough: {\r\n    response: \"Coughing can be caused by various factors including allergies, cold, flu, or respiratory infections. If your cough is persistent (lasting more than 2 weeks), produces discolored mucus, or is accompanied by shortness of breath, you should consult with a healthcare professional. Would you like me to help you book an appointment?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"Pulmonologist\"\r\n  },\r\n  default: {\r\n    response: \"Thank you for sharing your health concern. While I can provide general information, for a proper diagnosis and treatment plan, I'd recommend consulting with a healthcare professional. Would you like me to help you book an appointment with a doctor?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: null\r\n  }\r\n};\r\n\r\nexport const handlers = [\r\n  // Auth handlers\r\n  http.post('/api/auth/login', async ({ request }) => {\r\n    const { email, password } = await request.json()\r\n    \r\n    // Mock credentials check\r\n    if (email === 'doctor@example.com' && password === 'password') {\r\n      return HttpResponse.json({\r\n        success: true,\r\n        data: {\r\n          token: 'mock-jwt-token',\r\n          user: {\r\n            _id: 'doctor123',\r\n            name: 'Dr. John Doe',\r\n            email: 'doctor@example.com',\r\n            role: 'doctor'\r\n          }\r\n        }\r\n      })\r\n    } else if (email === 'patient@example.com' && password === 'password') {\r\n      return HttpResponse.json({\r\n        success: true,\r\n        data: {\r\n          token: 'mock-jwt-token',\r\n          user: {\r\n            _id: 'patient123',\r\n            name: 'Jane Smith',\r\n            email: 'patient@example.com',\r\n            role: 'patient'\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      return new HttpResponse(\r\n        JSON.stringify({\r\n          success: false,\r\n          message: 'Invalid credentials'\r\n        }),\r\n        { status: 401 }\r\n      )\r\n    }\r\n  }),\r\n\r\n  http.get('/api/auth/me', () => {\r\n    // Return mock user data\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: {\r\n        _id: 'user123',\r\n        name: 'Mock User',\r\n        email: 'user@example.com',\r\n        role: 'patient'\r\n      }\r\n    })\r\n  }),\r\n\r\n  // Appointment handlers\r\n  http.get('/api/appointments', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: [\r\n        {\r\n          _id: 'appt1',\r\n          patientId: 'patient123',\r\n          patientName: 'Jane Smith',\r\n          doctorId: 'doctor123',\r\n          doctorName: 'Dr. John Doe',\r\n          date: '2023-09-15',\r\n          timeSlot: '10:00 AM',\r\n          status: 'scheduled',\r\n          reason: 'Annual checkup',\r\n          createdAt: '2023-09-01T10:00:00Z'\r\n        },\r\n        {\r\n          _id: 'appt2',\r\n          patientId: 'patient123',\r\n          patientName: 'Jane Smith',\r\n          doctorId: 'doctor456',\r\n          doctorName: 'Dr. Sarah Wilson',\r\n          date: '2023-08-20',\r\n          timeSlot: '2:00 PM',\r\n          status: 'completed',\r\n          reason: 'Follow-up',\r\n          notes: 'Patient is recovering well.',\r\n          createdAt: '2023-08-01T14:00:00Z'\r\n        }\r\n      ]\r\n    })\r\n  }),\r\n\r\n  http.get('/api/appointments/user', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      appointments: mockAppointments\r\n    })\r\n  }),\r\n\r\n  http.post('/api/appointments', async ({ request }) => {\r\n    const appointment = await request.json()\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: {\r\n        _id: 'new-appt-id',\r\n        ...appointment,\r\n        status: 'scheduled',\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    })\r\n  }),\r\n\r\n  http.delete('/api/appointments/:id', ({ params }) => {\r\n    const { id } = params\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      message: `Appointment ${id} cancelled successfully`\r\n    })\r\n  }),\r\n\r\n  // Doctors handlers\r\n  http.get('/api/doctors', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: [\r\n        {\r\n          _id: 'doctor123',\r\n          name: 'Dr. John Doe',\r\n          specialization: 'Cardiologist',\r\n          consultationFee: 150,\r\n          availableTimeSlots: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\r\n        },\r\n        {\r\n          _id: 'doctor456',\r\n          name: 'Dr. Sarah Wilson',\r\n          specialization: 'Dermatologist',\r\n          consultationFee: 120,\r\n          availableTimeSlots: ['9:30 AM', '10:30 AM', '11:30 AM', '2:30 PM', '3:30 PM']\r\n        }\r\n      ]\r\n    })\r\n  }),\r\n\r\n  http.get('/api/doctors/:id/timeslots', ({ params, request }) => {\r\n    const { id } = params\r\n    const url = new URL(request.url)\r\n    const date = url.searchParams.get('date')\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\r\n    })\r\n  }),\r\n\r\n  // Available slots endpoint\r\n  http.get('/api/appointments/available-slots', ({ request }) => {\r\n    const url = new URL(request.url)\r\n    const date = url.searchParams.get('date')\r\n    const doctorId = url.searchParams.get('doctorId')\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      availableTimeSlots: mockTimeSlots.availableTimeSlots\r\n    })\r\n  }),\r\n\r\n  // Chatbot API endpoint handler\r\n  http.post('/api/chatbot/message', async ({ request }) => {\r\n    const { message, conversationHistory } = await request.json();\r\n    \r\n    // Simple keyword-based response for the mock\r\n    const messageLower = message.toLowerCase();\r\n    let response;\r\n    \r\n    if (messageLower.includes('headache') || messageLower.includes('head pain') || messageLower.includes('migraine')) {\r\n      response = medicalResponses.headache;\r\n    } else if (messageLower.includes('fever') || messageLower.includes('temperature') || messageLower.includes('hot')) {\r\n      response = medicalResponses.fever;\r\n    } else if (messageLower.includes('chest pain') || messageLower.includes('heart pain')) {\r\n      response = medicalResponses.chest_pain;\r\n    } else if (messageLower.includes('cough') || messageLower.includes('cold') || messageLower.includes('flu')) {\r\n      response = medicalResponses.cough;\r\n    } else {\r\n      response = medicalResponses.default;\r\n    }\r\n    \r\n    // Add personalization based on conversation history if available\r\n    if (conversationHistory && conversationHistory.length > 0) {\r\n      // Find the user's name if mentioned in conversation\r\n      const nameMatch = conversationHistory.find(msg => \r\n        msg.role === 'user' && \r\n        msg.content.match(/my name is ([a-zA-Z]+)/i)\r\n      );\r\n      \r\n      if (nameMatch) {\r\n        const name = nameMatch.content.match(/my name is ([a-zA-Z]+)/i)[1];\r\n        response.response = `Hi ${name}, ${response.response}`;\r\n      }\r\n    }\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: response\r\n    });\r\n  })\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}