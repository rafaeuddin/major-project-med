{"ast":null,"code":"import { http, HttpResponse } from 'msw';\n\n// Mock data for appointments\nconst mockAppointments = [{\n  _id: '1',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor456',\n    name: 'Dr. Sarah Parker',\n    specialization: 'Cardiology',\n    email: 'dr.parker@example.com'\n  },\n  date: new Date(Date.now() + 86400000 * 2).toISOString(),\n  // 2 days from now\n  timeSlot: '10:00 AM',\n  status: 'scheduled',\n  reason: 'Annual checkup',\n  notes: ''\n}, {\n  _id: '2',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor789',\n    name: 'Dr. Michael Chen',\n    specialization: 'Neurology',\n    email: 'dr.chen@example.com'\n  },\n  date: new Date(Date.now() - 86400000 * 3).toISOString(),\n  // 3 days ago\n  timeSlot: '2:00 PM',\n  status: 'completed',\n  reason: 'Headaches and dizziness',\n  notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\n}];\n\n// Mock available time slots\nconst mockTimeSlots = {\n  availableTimeSlots: ['09:00 AM', '10:00 AM', '11:00 AM', '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM']\n};\nexport const handlers = [\n// Get user appointments\nhttp.get('/api/appointments/user', () => {\n  return HttpResponse.json({\n    appointments: mockAppointments\n  });\n}),\n// Get available appointment slots\nhttp.get('/api/appointments/available-slots', () => {\n  return HttpResponse.json(mockTimeSlots);\n}),\n// Book appointment\nhttp.post('/api/appointments', async ({\n  request\n}) => {\n  const requestData = await request.json();\n  const {\n    doctorId,\n    date,\n    timeSlot,\n    reason\n  } = requestData;\n  const newAppointment = {\n    _id: Math.random().toString(36).substr(2, 9),\n    patientId: {\n      _id: 'patient123',\n      name: 'Alex Johnson',\n      email: 'alex@example.com',\n      phone: '123-456-7890'\n    },\n    doctorId: {\n      _id: doctorId,\n      name: 'Dr. Selected Doctor',\n      specialization: 'General Medicine'\n    },\n    date,\n    timeSlot,\n    status: 'scheduled',\n    reason,\n    notes: ''\n  };\n  mockAppointments.push(newAppointment);\n  return HttpResponse.json({\n    message: 'Appointment booked successfully',\n    appointment: newAppointment\n  }, {\n    status: 201\n  });\n}),\n// Cancel appointment\nhttp.delete('/api/appointments/:id', ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n  const appointmentIndex = mockAppointments.findIndex(apt => apt._id === id);\n  if (appointmentIndex === -1) {\n    return HttpResponse.json({\n      message: 'Appointment not found'\n    }, {\n      status: 404\n    });\n  }\n  mockAppointments[appointmentIndex].status = 'cancelled';\n  return HttpResponse.json({\n    message: 'Appointment cancelled successfully',\n    appointment: mockAppointments[appointmentIndex]\n  });\n})];","map":{"version":3,"names":["http","HttpResponse","mockAppointments","_id","patientId","name","email","phone","doctorId","specialization","date","Date","now","toISOString","timeSlot","status","reason","notes","mockTimeSlots","availableTimeSlots","handlers","get","json","appointments","post","request","requestData","newAppointment","Math","random","toString","substr","push","message","appointment","delete","params","id","appointmentIndex","findIndex","apt"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/mocks/handlers.js"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\n\r\n// Mock data for appointments\r\nconst mockAppointments = [\r\n  {\r\n    _id: '1',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor456',\r\n      name: 'Dr. Sarah Parker',\r\n      specialization: 'Cardiology',\r\n      email: 'dr.parker@example.com'\r\n    },\r\n    date: new Date(Date.now() + 86400000 * 2).toISOString(), // 2 days from now\r\n    timeSlot: '10:00 AM',\r\n    status: 'scheduled',\r\n    reason: 'Annual checkup',\r\n    notes: ''\r\n  },\r\n  {\r\n    _id: '2',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor789',\r\n      name: 'Dr. Michael Chen',\r\n      specialization: 'Neurology',\r\n      email: 'dr.chen@example.com'\r\n    },\r\n    date: new Date(Date.now() - 86400000 * 3).toISOString(), // 3 days ago\r\n    timeSlot: '2:00 PM',\r\n    status: 'completed',\r\n    reason: 'Headaches and dizziness',\r\n    notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\r\n  }\r\n];\r\n\r\n// Mock available time slots\r\nconst mockTimeSlots = {\r\n  availableTimeSlots: [\r\n    '09:00 AM', '10:00 AM', '11:00 AM',\r\n    '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM'\r\n  ]\r\n};\r\n\r\nexport const handlers = [\r\n  // Get user appointments\r\n  http.get('/api/appointments/user', () => {\r\n    return HttpResponse.json({ appointments: mockAppointments });\r\n  }),\r\n\r\n  // Get available appointment slots\r\n  http.get('/api/appointments/available-slots', () => {\r\n    return HttpResponse.json(mockTimeSlots);\r\n  }),\r\n\r\n  // Book appointment\r\n  http.post('/api/appointments', async ({ request }) => {\r\n    const requestData = await request.json();\r\n    const { doctorId, date, timeSlot, reason } = requestData;\r\n    \r\n    const newAppointment = {\r\n      _id: Math.random().toString(36).substr(2, 9),\r\n      patientId: {\r\n        _id: 'patient123',\r\n        name: 'Alex Johnson',\r\n        email: 'alex@example.com',\r\n        phone: '123-456-7890'\r\n      },\r\n      doctorId: {\r\n        _id: doctorId,\r\n        name: 'Dr. Selected Doctor',\r\n        specialization: 'General Medicine'\r\n      },\r\n      date,\r\n      timeSlot,\r\n      status: 'scheduled',\r\n      reason,\r\n      notes: ''\r\n    };\r\n    \r\n    mockAppointments.push(newAppointment);\r\n    \r\n    return HttpResponse.json({\r\n      message: 'Appointment booked successfully',\r\n      appointment: newAppointment\r\n    }, { status: 201 });\r\n  }),\r\n\r\n  // Cancel appointment\r\n  http.delete('/api/appointments/:id', ({ params }) => {\r\n    const { id } = params;\r\n    const appointmentIndex = mockAppointments.findIndex(apt => apt._id === id);\r\n    \r\n    if (appointmentIndex === -1) {\r\n      return HttpResponse.json(\r\n        { message: 'Appointment not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    mockAppointments[appointmentIndex].status = 'cancelled';\r\n    \r\n    return HttpResponse.json({\r\n      message: 'Appointment cancelled successfully',\r\n      appointment: mockAppointments[appointmentIndex]\r\n    });\r\n  })\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}