{"ast":null,"code":"import { setupWorker } from 'msw/browser';\nimport { handlers } from './handlers';\nimport { http, HttpResponse, delay } from 'msw';\n\n// This configures a Service Worker with the given request handlers.\n// Create a modified version of the handlers that includes a delay\n// We need to use a different approach since handler.clone is not available\nconst wrappedHandlers = handlers.map(handler => {\n  // Extract the method and path from the original handler\n  const method = handler.info.method;\n  const path = handler.info.path;\n\n  // Create a new handler with the same method and path\n  return http[method.toLowerCase()](path, async params => {\n    // Add a small delay to prevent race conditions\n    await delay(50);\n\n    // Call the original handler and get its response\n    try {\n      // Execute the original handler\n      // Note: This is a simple approach and may not work for all cases\n      // If this causes issues, we'll need to revert to using the original handlers\n      return await handler.resolver(params.request, params.params, {});\n    } catch (error) {\n      console.error('Error in MSW handler:', error);\n\n      // Return a fallback response\n      return new HttpResponse(JSON.stringify({\n        success: false,\n        message: 'Error processing request'\n      }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  });\n});\n\n// Use original handlers as a fallback if the wrapped ones cause issues\nexport const worker = setupWorker(...handlers);","map":{"version":3,"names":["setupWorker","handlers","http","HttpResponse","delay","wrappedHandlers","map","handler","method","info","path","toLowerCase","params","resolver","request","error","console","JSON","stringify","success","message","status","headers","worker"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/mocks/browser.js"],"sourcesContent":["import { setupWorker } from 'msw/browser';\r\nimport { handlers } from './handlers';\r\nimport { http, HttpResponse, delay } from 'msw';\r\n\r\n// This configures a Service Worker with the given request handlers.\r\n// Create a modified version of the handlers that includes a delay\r\n// We need to use a different approach since handler.clone is not available\r\nconst wrappedHandlers = handlers.map(handler => {\r\n  // Extract the method and path from the original handler\r\n  const method = handler.info.method;\r\n  const path = handler.info.path;\r\n  \r\n  // Create a new handler with the same method and path\r\n  return http[method.toLowerCase()](path, async (params) => {\r\n    // Add a small delay to prevent race conditions\r\n    await delay(50);\r\n    \r\n    // Call the original handler and get its response\r\n    try {\r\n      // Execute the original handler\r\n      // Note: This is a simple approach and may not work for all cases\r\n      // If this causes issues, we'll need to revert to using the original handlers\r\n      return await handler.resolver(params.request, params.params, {});\r\n    } catch (error) {\r\n      console.error('Error in MSW handler:', error);\r\n      \r\n      // Return a fallback response\r\n      return new HttpResponse(\r\n        JSON.stringify({ success: false, message: 'Error processing request' }),\r\n        { \r\n          status: 200, \r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n  });\r\n});\r\n\r\n// Use original handlers as a fallback if the wrapped ones cause issues\r\nexport const worker = setupWorker(...handlers); "],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,IAAI,EAAEC,YAAY,EAAEC,KAAK,QAAQ,KAAK;;AAE/C;AACA;AACA;AACA,MAAMC,eAAe,GAAGJ,QAAQ,CAACK,GAAG,CAACC,OAAO,IAAI;EAC9C;EACA,MAAMC,MAAM,GAAGD,OAAO,CAACE,IAAI,CAACD,MAAM;EAClC,MAAME,IAAI,GAAGH,OAAO,CAACE,IAAI,CAACC,IAAI;;EAE9B;EACA,OAAOR,IAAI,CAACM,MAAM,CAACG,WAAW,CAAC,CAAC,CAAC,CAACD,IAAI,EAAE,MAAOE,MAAM,IAAK;IACxD;IACA,MAAMR,KAAK,CAAC,EAAE,CAAC;;IAEf;IACA,IAAI;MACF;MACA;MACA;MACA,OAAO,MAAMG,OAAO,CAACM,QAAQ,CAACD,MAAM,CAACE,OAAO,EAAEF,MAAM,CAACA,MAAM,EAAE,CAAC,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;;MAE7C;MACA,OAAO,IAAIZ,YAAY,CACrBc,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA2B,CAAC,CAAC,EACvE;QACEC,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CACF,CAAC;IACH;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,MAAM,GAAGvB,WAAW,CAAC,GAAGC,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}