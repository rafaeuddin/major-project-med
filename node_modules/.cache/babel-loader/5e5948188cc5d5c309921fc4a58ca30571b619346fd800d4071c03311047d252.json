{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrafa\\\\OneDrive\\\\Desktop\\\\code\\\\major project\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n  // Define test accounts for development\n  const TEST_ACCOUNTS = {\n    'john.smith': {\n      id: 'doctor123',\n      username: 'john.smith',\n      name: 'Dr. John Smith',\n      email: 'john.smith@example.com',\n      phone: '1234567890',\n      password: 'password123',\n      role: 'doctor',\n      specialization: 'Cardiology',\n      isEmailVerified: true,\n      isPhoneVerified: true\n    },\n    'alex': {\n      id: 'patient123',\n      username: 'alex',\n      name: 'Alex Johnson',\n      email: 'alex@example.com',\n      phone: '9876543210',\n      password: 'password123',\n      role: 'patient',\n      isEmailVerified: true,\n      isPhoneVerified: true\n    }\n  };\n\n  // Flag to indicate if we're using test accounts (dev mode)\n  const DEV_MODE = process.env.NODE_ENV === 'development';\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      setToken(token);\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n\n  // Fetch user data from token\n  const fetchUserData = async () => {\n    if (!token) return null;\n    try {\n      // In dev mode with test accounts, just return the current user\n      if (DEV_MODE && currentUser) {\n        return currentUser;\n      }\n      const response = await authFetch('/api/auth/me');\n      if (response.ok) {\n        const data = await response.json();\n        return data.data;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      return null;\n    }\n  };\n\n  // Login function - called with token and user from API\n  const login = (authToken, user) => {\n    localStorage.setItem('token', authToken);\n    localStorage.setItem('user', JSON.stringify(user));\n    setToken(authToken);\n    setCurrentUser(user);\n    return true;\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setToken('');\n    setCurrentUser(null);\n  };\n\n  // Reusable fetch function with auth token\n  const authFetch = async (url, options = {}) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    const config = {\n      ...options,\n      headers\n    };\n\n    // Create an abort controller for timeout (use a shorter timeout)\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\n\n    try {\n      console.log(`Making request to ${url}`);\n      const startTime = Date.now();\n\n      // If we're in development mode and the URL is one of the problematic ones,\n      // log extra information and use a more direct approach\n      if (DEV_MODE && (url.includes('/api/appointments/user') || url.includes('/api/patients/profile'))) {\n        console.log(`Special handling for potentially problematic endpoint: ${url}`);\n        try {\n          clearTimeout(timeoutId);\n\n          // Use basic fetch with minimal options\n          const directResponse = await fetch(url, {\n            method: options.method || 'GET',\n            headers: headers,\n            cache: 'no-cache' // Prevent caching issues\n          });\n          console.log(`Direct response from ${url} in ${Date.now() - startTime}ms:`, directResponse.status);\n          return directResponse;\n        } catch (directError) {\n          console.error(`Direct fetch to ${url} failed:`, directError);\n          // Continue to normal flow if direct fetch fails\n        }\n      }\n      const response = await fetch(url, {\n        ...config,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      console.log(`Response from ${url} in ${Date.now() - startTime}ms:`, response.status);\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      if (error.name === 'AbortError') {\n        console.error(`Request to ${url} timed out after 3 seconds`);\n        // Create a Response object to handle timeout errors\n        return new Response(JSON.stringify({\n          message: 'Request timed out. Please try again later.',\n          success: false\n        }), {\n          status: 504,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n      console.error(`Fetch to ${url} failed:`, error);\n\n      // Create a generic error response\n      return new Response(JSON.stringify({\n        message: 'Network error occurred. Please check your connection.',\n        success: false\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  };\n\n  // Handle login with identifier (username/email/phone) and password\n  const handleLogin = async (identifier, password) => {\n    setError('');\n    try {\n      // In development mode, check test accounts first\n      if (DEV_MODE) {\n        // Check if the identifier matches any test account\n        const testUser = Object.values(TEST_ACCOUNTS).find(account => account.username === identifier || account.email === identifier || account.phone === identifier);\n        if (testUser && testUser.password === password) {\n          // Generate mock token\n          const mockToken = `test_token_${Date.now()}`;\n\n          // Login the test user\n          login(mockToken, {\n            id: testUser.id,\n            name: testUser.name,\n            username: testUser.username,\n            email: testUser.email,\n            phone: testUser.phone,\n            role: testUser.role,\n            isEmailVerified: testUser.isEmailVerified,\n            isPhoneVerified: testUser.isPhoneVerified\n          });\n          return true;\n        } else if (testUser) {\n          setError('Invalid password');\n          return false;\n        }\n\n        // If no matching test account but we're in dev mode, try the mock API\n        // This will allow our mock doctor login to work\n        const response = await fetch('/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: identifier,\n            password\n          })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          setError(data.message || 'Login failed');\n          return false;\n        }\n        login(data.token, data.user);\n        return true;\n      }\n\n      // If not in dev mode, try regular API\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          identifier,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Login failed');\n        return false;\n      }\n      login(data.token, data.user);\n      return true;\n    } catch (err) {\n      console.error('Login error:', err);\n      setError('An error occurred during login. Please try again.');\n      return false;\n    }\n  };\n\n  // Register with email\n  const registerWithEmail = async formData => {\n    try {\n      setError('');\n\n      // In development mode with test accounts\n      if (DEV_MODE) {\n        // Check if email or username already exists\n        const emailExists = Object.values(TEST_ACCOUNTS).some(account => account.email === formData.email);\n        const usernameExists = Object.values(TEST_ACCOUNTS).some(account => account.username === formData.username);\n        if (emailExists) {\n          setError('Email already in use');\n          return false;\n        }\n        if (usernameExists) {\n          setError('Username already in use');\n          return false;\n        }\n\n        // In a real app we would add the user to the database\n        console.log('DEV MODE: User registered:', formData);\n\n        // Return success for development\n        return true;\n      }\n\n      // Regular API call for production\n      const response = await fetch('/api/auth/register/email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Registration failed');\n        return false;\n      }\n      return true;\n    } catch (err) {\n      setError('An error occurred during registration');\n      console.error(err);\n      return false;\n    }\n  };\n\n  // Register with phone\n  const registerWithPhone = async formData => {\n    try {\n      setError('');\n\n      // In development mode with test accounts\n      if (DEV_MODE) {\n        // Check if phone or username already exists\n        const phoneExists = Object.values(TEST_ACCOUNTS).some(account => account.phone === formData.phone);\n        const usernameExists = Object.values(TEST_ACCOUNTS).some(account => account.username === formData.username);\n        if (phoneExists) {\n          setError('Phone number already in use');\n          return false;\n        }\n        if (usernameExists) {\n          setError('Username already in use');\n          return false;\n        }\n\n        // In a real app we would add the user to the database\n        console.log('DEV MODE: User registered:', formData);\n\n        // Return success for development\n        return true;\n      }\n\n      // Regular API call for production\n      const response = await fetch('/api/auth/register/phone', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Registration failed');\n        return false;\n      }\n      return true;\n    } catch (err) {\n      setError('An error occurred during registration');\n      console.error(err);\n      return false;\n    }\n  };\n\n  // Verify email OTP\n  const verifyEmailOTP = async (email, otp) => {\n    try {\n      setError('');\n\n      // In development mode, auto-verify with any OTP\n      if (DEV_MODE) {\n        // Find test account with this email\n        const testUser = Object.values(TEST_ACCOUNTS).find(account => account.email === email);\n        if (testUser) {\n          // Generate mock token and log in the user\n          const mockToken = `test_token_${Date.now()}`;\n          login(mockToken, {\n            id: testUser.id,\n            name: testUser.name,\n            username: testUser.username,\n            email: testUser.email,\n            phone: testUser.phone,\n            role: testUser.role,\n            isEmailVerified: true,\n            isPhoneVerified: testUser.isPhoneVerified\n          });\n          return true;\n        } else {\n          setError('Email not found');\n          return false;\n        }\n      }\n\n      // Regular API call for production\n      const response = await fetch('/api/auth/verify-email-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          otp\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Verification failed');\n        return false;\n      }\n      login(data.token, data.user);\n      return true;\n    } catch (err) {\n      setError('An error occurred during verification');\n      console.error(err);\n      return false;\n    }\n  };\n\n  // Verify phone OTP\n  const verifyPhoneOTP = async (phone, otp) => {\n    try {\n      setError('');\n\n      // In development mode, auto-verify with any OTP\n      if (DEV_MODE) {\n        // Find test account with this phone\n        const testUser = Object.values(TEST_ACCOUNTS).find(account => account.phone === phone);\n        if (testUser) {\n          // Generate mock token and log in the user\n          const mockToken = `test_token_${Date.now()}`;\n          login(mockToken, {\n            id: testUser.id,\n            name: testUser.name,\n            username: testUser.username,\n            email: testUser.email,\n            phone: testUser.phone,\n            role: testUser.role,\n            isEmailVerified: testUser.isEmailVerified,\n            isPhoneVerified: true\n          });\n          return true;\n        } else {\n          setError('Phone number not found');\n          return false;\n        }\n      }\n\n      // Regular API call for production\n      const response = await fetch('/api/auth/verify-phone-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          phone,\n          otp\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Verification failed');\n        return false;\n      }\n      login(data.token, data.user);\n      return true;\n    } catch (err) {\n      setError('An error occurred during verification');\n      console.error(err);\n      return false;\n    }\n  };\n\n  // Send phone OTP\n  const sendPhoneOTP = async phone => {\n    try {\n      setError('');\n\n      // In development mode, just simulate sending OTP\n      if (DEV_MODE) {\n        // Check if phone exists in test accounts\n        const phoneExists = Object.values(TEST_ACCOUNTS).some(account => account.phone === phone);\n        if (!phoneExists) {\n          setError('Phone number not registered');\n          return false;\n        }\n        console.log(`DEV MODE: OTP sent to ${phone}. Use any 6 digits to verify.`);\n        return true;\n      }\n\n      // Regular API call for production\n      const response = await fetch('/api/auth/send-phone-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          phone\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Failed to send OTP');\n        return false;\n      }\n      return true;\n    } catch (err) {\n      setError('An error occurred while sending OTP');\n      console.error(err);\n      return false;\n    }\n  };\n\n  // Send email OTP\n  const sendEmailOTP = async email => {\n    try {\n      setError('');\n\n      // In development mode, just simulate sending OTP\n      if (DEV_MODE) {\n        // Check if email exists in test accounts\n        const emailExists = Object.values(TEST_ACCOUNTS).some(account => account.email === email);\n        if (!emailExists) {\n          setError('Email not registered');\n          return false;\n        }\n        console.log(`DEV MODE: OTP sent to ${email}. Use any 6 digits to verify.`);\n        return true;\n      }\n\n      // Regular API call for production\n      const response = await fetch('/api/auth/send-email-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Failed to send OTP');\n        return false;\n      }\n      return true;\n    } catch (err) {\n      setError('An error occurred while sending OTP');\n      console.error(err);\n      return false;\n    }\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login: handleLogin,\n    logout,\n    authFetch,\n    registerWithEmail,\n    registerWithPhone,\n    verifyEmailOTP,\n    verifyPhoneOTP,\n    sendPhoneOTP,\n    sendEmailOTP\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 581,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"zfFfAUrY7WUaJPdJsmKSY6vAq+g=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","error","setError","token","setToken","localStorage","getItem","TEST_ACCOUNTS","id","username","name","email","phone","password","role","specialization","isEmailVerified","isPhoneVerified","DEV_MODE","process","env","NODE_ENV","user","JSON","parse","fetchUserData","response","authFetch","ok","data","json","console","login","authToken","setItem","stringify","logout","removeItem","url","options","headers","Authorization","config","controller","AbortController","timeoutId","setTimeout","abort","log","startTime","Date","now","includes","clearTimeout","directResponse","fetch","method","cache","status","directError","signal","Response","message","success","handleLogin","identifier","testUser","Object","values","find","account","mockToken","body","err","registerWithEmail","formData","emailExists","some","usernameExists","registerWithPhone","phoneExists","verifyEmailOTP","otp","verifyPhoneOTP","sendPhoneOTP","sendEmailOTP","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n\r\n  // Define test accounts for development\r\n  const TEST_ACCOUNTS = {\r\n    'john.smith': {\r\n      id: 'doctor123',\r\n      username: 'john.smith',\r\n      name: 'Dr. John Smith',\r\n      email: 'john.smith@example.com',\r\n      phone: '1234567890',\r\n      password: 'password123',\r\n      role: 'doctor',\r\n      specialization: 'Cardiology',\r\n      isEmailVerified: true,\r\n      isPhoneVerified: true\r\n    },\r\n    'alex': {\r\n      id: 'patient123',\r\n      username: 'alex',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '9876543210',\r\n      password: 'password123',\r\n      role: 'patient',\r\n      isEmailVerified: true,\r\n      isPhoneVerified: true\r\n    }\r\n  };\r\n\r\n  // Flag to indicate if we're using test accounts (dev mode)\r\n  const DEV_MODE = process.env.NODE_ENV === 'development';\r\n\r\n  // Check if user is logged in on initial load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const user = localStorage.getItem('user');\r\n\r\n    if (token && user) {\r\n      setToken(token);\r\n      setCurrentUser(JSON.parse(user));\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Fetch user data from token\r\n  const fetchUserData = async () => {\r\n    if (!token) return null;\r\n\r\n    try {\r\n      // In dev mode with test accounts, just return the current user\r\n      if (DEV_MODE && currentUser) {\r\n        return currentUser;\r\n      }\r\n\r\n      const response = await authFetch('/api/auth/me');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data.data;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching user data:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Login function - called with token and user from API\r\n  const login = (authToken, user) => {\r\n    localStorage.setItem('token', authToken);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    setToken(authToken);\r\n    setCurrentUser(user);\r\n    return true;\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setToken('');\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  // Reusable fetch function with auth token\r\n  const authFetch = async (url, options = {}) => {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    };\r\n\r\n    if (token) {\r\n      headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    const config = {\r\n      ...options,\r\n      headers,\r\n    };\r\n\r\n    // Create an abort controller for timeout (use a shorter timeout)\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\r\n    \r\n    try {\r\n      console.log(`Making request to ${url}`);\r\n      const startTime = Date.now();\r\n      \r\n      // If we're in development mode and the URL is one of the problematic ones,\r\n      // log extra information and use a more direct approach\r\n      if (DEV_MODE && (url.includes('/api/appointments/user') || url.includes('/api/patients/profile'))) {\r\n        console.log(`Special handling for potentially problematic endpoint: ${url}`);\r\n        \r\n        try {\r\n          clearTimeout(timeoutId);\r\n          \r\n          // Use basic fetch with minimal options\r\n          const directResponse = await fetch(url, {\r\n            method: options.method || 'GET',\r\n            headers: headers,\r\n            cache: 'no-cache' // Prevent caching issues\r\n          });\r\n          \r\n          console.log(`Direct response from ${url} in ${Date.now() - startTime}ms:`, directResponse.status);\r\n          return directResponse;\r\n        } catch (directError) {\r\n          console.error(`Direct fetch to ${url} failed:`, directError);\r\n          // Continue to normal flow if direct fetch fails\r\n        }\r\n      }\r\n      \r\n      const response = await fetch(url, {\r\n        ...config,\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      console.log(`Response from ${url} in ${Date.now() - startTime}ms:`, response.status);\r\n      return response;\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      \r\n      if (error.name === 'AbortError') {\r\n        console.error(`Request to ${url} timed out after 3 seconds`);\r\n        // Create a Response object to handle timeout errors\r\n        return new Response(\r\n          JSON.stringify({ \r\n            message: 'Request timed out. Please try again later.',\r\n            success: false \r\n          }),\r\n          { status: 504, headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n      }\r\n      \r\n      console.error(`Fetch to ${url} failed:`, error);\r\n      \r\n      // Create a generic error response\r\n      return new Response(\r\n        JSON.stringify({ \r\n          message: 'Network error occurred. Please check your connection.',\r\n          success: false \r\n        }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n  };\r\n\r\n  // Handle login with identifier (username/email/phone) and password\r\n  const handleLogin = async (identifier, password) => {\r\n    setError('');\r\n    \r\n    try {\r\n      // In development mode, check test accounts first\r\n      if (DEV_MODE) {\r\n        // Check if the identifier matches any test account\r\n        const testUser = Object.values(TEST_ACCOUNTS).find(\r\n          account => account.username === identifier || \r\n                      account.email === identifier || \r\n                      account.phone === identifier\r\n        );\r\n        \r\n        if (testUser && testUser.password === password) {\r\n          // Generate mock token\r\n          const mockToken = `test_token_${Date.now()}`;\r\n          \r\n          // Login the test user\r\n          login(mockToken, {\r\n            id: testUser.id,\r\n            name: testUser.name,\r\n            username: testUser.username,\r\n            email: testUser.email,\r\n            phone: testUser.phone,\r\n            role: testUser.role,\r\n            isEmailVerified: testUser.isEmailVerified,\r\n            isPhoneVerified: testUser.isPhoneVerified\r\n          });\r\n          \r\n          return true;\r\n        } else if (testUser) {\r\n          setError('Invalid password');\r\n          return false;\r\n        }\r\n        \r\n        // If no matching test account but we're in dev mode, try the mock API\r\n        // This will allow our mock doctor login to work\r\n        const response = await fetch('/api/auth/login', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ email: identifier, password })\r\n        });\r\n        \r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n          setError(data.message || 'Login failed');\r\n          return false;\r\n        }\r\n        \r\n        login(data.token, data.user);\r\n        return true;\r\n      }\r\n      \r\n      // If not in dev mode, try regular API\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ identifier, password })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setError(data.message || 'Login failed');\r\n        return false;\r\n      }\r\n      \r\n      login(data.token, data.user);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError('An error occurred during login. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Register with email\r\n  const registerWithEmail = async (formData) => {\r\n    try {\r\n      setError('');\r\n      \r\n      // In development mode with test accounts\r\n      if (DEV_MODE) {\r\n        // Check if email or username already exists\r\n        const emailExists = Object.values(TEST_ACCOUNTS).some(\r\n          account => account.email === formData.email\r\n        );\r\n        \r\n        const usernameExists = Object.values(TEST_ACCOUNTS).some(\r\n          account => account.username === formData.username\r\n        );\r\n        \r\n        if (emailExists) {\r\n          setError('Email already in use');\r\n          return false;\r\n        }\r\n        \r\n        if (usernameExists) {\r\n          setError('Username already in use');\r\n          return false;\r\n        }\r\n        \r\n        // In a real app we would add the user to the database\r\n        console.log('DEV MODE: User registered:', formData);\r\n        \r\n        // Return success for development\r\n        return true;\r\n      }\r\n      \r\n      // Regular API call for production\r\n      const response = await fetch('/api/auth/register/email', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(formData)\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setError(data.message || 'Registration failed');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError('An error occurred during registration');\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Register with phone\r\n  const registerWithPhone = async (formData) => {\r\n    try {\r\n      setError('');\r\n      \r\n      // In development mode with test accounts\r\n      if (DEV_MODE) {\r\n        // Check if phone or username already exists\r\n        const phoneExists = Object.values(TEST_ACCOUNTS).some(\r\n          account => account.phone === formData.phone\r\n        );\r\n        \r\n        const usernameExists = Object.values(TEST_ACCOUNTS).some(\r\n          account => account.username === formData.username\r\n        );\r\n        \r\n        if (phoneExists) {\r\n          setError('Phone number already in use');\r\n          return false;\r\n        }\r\n        \r\n        if (usernameExists) {\r\n          setError('Username already in use');\r\n          return false;\r\n        }\r\n        \r\n        // In a real app we would add the user to the database\r\n        console.log('DEV MODE: User registered:', formData);\r\n        \r\n        // Return success for development\r\n        return true;\r\n      }\r\n      \r\n      // Regular API call for production\r\n      const response = await fetch('/api/auth/register/phone', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(formData)\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setError(data.message || 'Registration failed');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError('An error occurred during registration');\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Verify email OTP\r\n  const verifyEmailOTP = async (email, otp) => {\r\n    try {\r\n      setError('');\r\n      \r\n      // In development mode, auto-verify with any OTP\r\n      if (DEV_MODE) {\r\n        // Find test account with this email\r\n        const testUser = Object.values(TEST_ACCOUNTS).find(\r\n          account => account.email === email\r\n        );\r\n        \r\n        if (testUser) {\r\n          // Generate mock token and log in the user\r\n          const mockToken = `test_token_${Date.now()}`;\r\n          \r\n          login(mockToken, {\r\n            id: testUser.id,\r\n            name: testUser.name,\r\n            username: testUser.username,\r\n            email: testUser.email,\r\n            phone: testUser.phone,\r\n            role: testUser.role,\r\n            isEmailVerified: true,\r\n            isPhoneVerified: testUser.isPhoneVerified\r\n          });\r\n          \r\n          return true;\r\n        } else {\r\n          setError('Email not found');\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      // Regular API call for production\r\n      const response = await fetch('/api/auth/verify-email-otp', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, otp })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setError(data.message || 'Verification failed');\r\n        return false;\r\n      }\r\n      \r\n      login(data.token, data.user);\r\n      return true;\r\n    } catch (err) {\r\n      setError('An error occurred during verification');\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Verify phone OTP\r\n  const verifyPhoneOTP = async (phone, otp) => {\r\n    try {\r\n      setError('');\r\n      \r\n      // In development mode, auto-verify with any OTP\r\n      if (DEV_MODE) {\r\n        // Find test account with this phone\r\n        const testUser = Object.values(TEST_ACCOUNTS).find(\r\n          account => account.phone === phone\r\n        );\r\n        \r\n        if (testUser) {\r\n          // Generate mock token and log in the user\r\n          const mockToken = `test_token_${Date.now()}`;\r\n          \r\n          login(mockToken, {\r\n            id: testUser.id,\r\n            name: testUser.name,\r\n            username: testUser.username,\r\n            email: testUser.email,\r\n            phone: testUser.phone,\r\n            role: testUser.role,\r\n            isEmailVerified: testUser.isEmailVerified,\r\n            isPhoneVerified: true\r\n          });\r\n          \r\n          return true;\r\n        } else {\r\n          setError('Phone number not found');\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      // Regular API call for production\r\n      const response = await fetch('/api/auth/verify-phone-otp', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ phone, otp })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setError(data.message || 'Verification failed');\r\n        return false;\r\n      }\r\n      \r\n      login(data.token, data.user);\r\n      return true;\r\n    } catch (err) {\r\n      setError('An error occurred during verification');\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Send phone OTP\r\n  const sendPhoneOTP = async (phone) => {\r\n    try {\r\n      setError('');\r\n      \r\n      // In development mode, just simulate sending OTP\r\n      if (DEV_MODE) {\r\n        // Check if phone exists in test accounts\r\n        const phoneExists = Object.values(TEST_ACCOUNTS).some(\r\n          account => account.phone === phone\r\n        );\r\n        \r\n        if (!phoneExists) {\r\n          setError('Phone number not registered');\r\n          return false;\r\n        }\r\n        \r\n        console.log(`DEV MODE: OTP sent to ${phone}. Use any 6 digits to verify.`);\r\n        return true;\r\n      }\r\n      \r\n      // Regular API call for production\r\n      const response = await fetch('/api/auth/send-phone-otp', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ phone })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setError(data.message || 'Failed to send OTP');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError('An error occurred while sending OTP');\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Send email OTP\r\n  const sendEmailOTP = async (email) => {\r\n    try {\r\n      setError('');\r\n      \r\n      // In development mode, just simulate sending OTP\r\n      if (DEV_MODE) {\r\n        // Check if email exists in test accounts\r\n        const emailExists = Object.values(TEST_ACCOUNTS).some(\r\n          account => account.email === email\r\n        );\r\n        \r\n        if (!emailExists) {\r\n          setError('Email not registered');\r\n          return false;\r\n        }\r\n        \r\n        console.log(`DEV MODE: OTP sent to ${email}. Use any 6 digits to verify.`);\r\n        return true;\r\n      }\r\n      \r\n      // Regular API call for production\r\n      const response = await fetch('/api/auth/send-email-otp', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setError(data.message || 'Failed to send OTP');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError('An error occurred while sending OTP');\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login: handleLogin,\r\n    logout,\r\n    authFetch,\r\n    registerWithEmail,\r\n    registerWithPhone,\r\n    verifyEmailOTP,\r\n    verifyPhoneOTP,\r\n    sendPhoneOTP,\r\n    sendEmailOTP\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}