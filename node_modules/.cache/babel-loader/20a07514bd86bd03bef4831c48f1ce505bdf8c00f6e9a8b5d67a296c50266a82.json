{"ast":null,"code":"import { http, HttpResponse } from 'msw';\n\n// Mock data for appointments\nconst mockAppointments = [{\n  _id: '1',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor456',\n    name: 'Dr. Sarah Parker',\n    specialization: 'Cardiology',\n    email: 'dr.parker@example.com'\n  },\n  date: new Date(Date.now() + 86400000 * 2).toISOString(),\n  // 2 days from now\n  timeSlot: '10:00 AM',\n  status: 'scheduled',\n  reason: 'Annual checkup',\n  notes: ''\n}, {\n  _id: '2',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor789',\n    name: 'Dr. Michael Chen',\n    specialization: 'Neurology',\n    email: 'dr.chen@example.com'\n  },\n  date: new Date(Date.now() - 86400000 * 3).toISOString(),\n  // 3 days ago\n  timeSlot: '2:00 PM',\n  status: 'completed',\n  reason: 'Headaches and dizziness',\n  notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\n}];\n\n// Mock available time slots\nconst mockTimeSlots = {\n  availableTimeSlots: ['09:00 AM', '10:00 AM', '11:00 AM', '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM']\n};\nexport const handlers = [\n// Auth handlers\nhttp.post('/api/auth/login', async ({\n  request\n}) => {\n  const {\n    email,\n    password\n  } = await request.json();\n\n  // Mock credentials check\n  if (email === 'doctor@example.com' && password === 'password') {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          _id: 'doctor123',\n          name: 'Dr. John Doe',\n          email: 'doctor@example.com',\n          role: 'doctor'\n        }\n      }\n    });\n  } else if (email === 'patient@example.com' && password === 'password') {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          _id: 'patient123',\n          name: 'Jane Smith',\n          email: 'patient@example.com',\n          role: 'patient'\n        }\n      }\n    });\n  } else {\n    return new HttpResponse(JSON.stringify({\n      success: false,\n      message: 'Invalid credentials'\n    }), {\n      status: 401\n    });\n  }\n}), http.get('/api/auth/me', () => {\n  // Return mock user data\n  return HttpResponse.json({\n    success: true,\n    data: {\n      _id: 'user123',\n      name: 'Mock User',\n      email: 'user@example.com',\n      role: 'patient'\n    }\n  });\n}),\n// Appointment handlers\nhttp.get('/api/appointments', () => {\n  return HttpResponse.json({\n    success: true,\n    data: [{\n      _id: 'appt1',\n      patientId: 'patient123',\n      patientName: 'Jane Smith',\n      doctorId: 'doctor123',\n      doctorName: 'Dr. John Doe',\n      date: '2023-09-15',\n      timeSlot: '10:00 AM',\n      status: 'scheduled',\n      reason: 'Annual checkup',\n      createdAt: '2023-09-01T10:00:00Z'\n    }, {\n      _id: 'appt2',\n      patientId: 'patient123',\n      patientName: 'Jane Smith',\n      doctorId: 'doctor456',\n      doctorName: 'Dr. Sarah Wilson',\n      date: '2023-08-20',\n      timeSlot: '2:00 PM',\n      status: 'completed',\n      reason: 'Follow-up',\n      notes: 'Patient is recovering well.',\n      createdAt: '2023-08-01T14:00:00Z'\n    }]\n  });\n}), http.post('/api/appointments', async ({\n  request\n}) => {\n  const appointment = await request.json();\n  return HttpResponse.json({\n    success: true,\n    data: {\n      _id: 'new-appt-id',\n      ...appointment,\n      status: 'scheduled',\n      createdAt: new Date().toISOString()\n    }\n  });\n}), http.delete('/api/appointments/:id', ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n  return HttpResponse.json({\n    success: true,\n    message: `Appointment ${id} cancelled successfully`\n  });\n}),\n// Doctors handlers\nhttp.get('/api/doctors', () => {\n  return HttpResponse.json({\n    success: true,\n    data: [{\n      _id: 'doctor123',\n      name: 'Dr. John Doe',\n      specialization: 'Cardiologist',\n      consultationFee: 150,\n      availableTimeSlots: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\n    }, {\n      _id: 'doctor456',\n      name: 'Dr. Sarah Wilson',\n      specialization: 'Dermatologist',\n      consultationFee: 120,\n      availableTimeSlots: ['9:30 AM', '10:30 AM', '11:30 AM', '2:30 PM', '3:30 PM']\n    }]\n  });\n}), http.get('/api/doctors/:id/timeslots', ({\n  params,\n  request\n}) => {\n  const {\n    id\n  } = params;\n  const url = new URL(request.url);\n  const date = url.searchParams.get('date');\n  return HttpResponse.json({\n    success: true,\n    data: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\n  });\n})];","map":{"version":3,"names":["http","HttpResponse","mockAppointments","_id","patientId","name","email","phone","doctorId","specialization","date","Date","now","toISOString","timeSlot","status","reason","notes","mockTimeSlots","availableTimeSlots","handlers","post","request","password","json","success","data","token","user","role","JSON","stringify","message","get","patientName","doctorName","createdAt","appointment","delete","params","id","consultationFee","url","URL","searchParams"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/mocks/handlers.js"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\n\r\n// Mock data for appointments\r\nconst mockAppointments = [\r\n  {\r\n    _id: '1',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor456',\r\n      name: 'Dr. Sarah Parker',\r\n      specialization: 'Cardiology',\r\n      email: 'dr.parker@example.com'\r\n    },\r\n    date: new Date(Date.now() + 86400000 * 2).toISOString(), // 2 days from now\r\n    timeSlot: '10:00 AM',\r\n    status: 'scheduled',\r\n    reason: 'Annual checkup',\r\n    notes: ''\r\n  },\r\n  {\r\n    _id: '2',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor789',\r\n      name: 'Dr. Michael Chen',\r\n      specialization: 'Neurology',\r\n      email: 'dr.chen@example.com'\r\n    },\r\n    date: new Date(Date.now() - 86400000 * 3).toISOString(), // 3 days ago\r\n    timeSlot: '2:00 PM',\r\n    status: 'completed',\r\n    reason: 'Headaches and dizziness',\r\n    notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\r\n  }\r\n];\r\n\r\n// Mock available time slots\r\nconst mockTimeSlots = {\r\n  availableTimeSlots: [\r\n    '09:00 AM', '10:00 AM', '11:00 AM',\r\n    '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM'\r\n  ]\r\n};\r\n\r\nexport const handlers = [\r\n  // Auth handlers\r\n  http.post('/api/auth/login', async ({ request }) => {\r\n    const { email, password } = await request.json()\r\n    \r\n    // Mock credentials check\r\n    if (email === 'doctor@example.com' && password === 'password') {\r\n      return HttpResponse.json({\r\n        success: true,\r\n        data: {\r\n          token: 'mock-jwt-token',\r\n          user: {\r\n            _id: 'doctor123',\r\n            name: 'Dr. John Doe',\r\n            email: 'doctor@example.com',\r\n            role: 'doctor'\r\n          }\r\n        }\r\n      })\r\n    } else if (email === 'patient@example.com' && password === 'password') {\r\n      return HttpResponse.json({\r\n        success: true,\r\n        data: {\r\n          token: 'mock-jwt-token',\r\n          user: {\r\n            _id: 'patient123',\r\n            name: 'Jane Smith',\r\n            email: 'patient@example.com',\r\n            role: 'patient'\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      return new HttpResponse(\r\n        JSON.stringify({\r\n          success: false,\r\n          message: 'Invalid credentials'\r\n        }),\r\n        { status: 401 }\r\n      )\r\n    }\r\n  }),\r\n\r\n  http.get('/api/auth/me', () => {\r\n    // Return mock user data\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: {\r\n        _id: 'user123',\r\n        name: 'Mock User',\r\n        email: 'user@example.com',\r\n        role: 'patient'\r\n      }\r\n    })\r\n  }),\r\n\r\n  // Appointment handlers\r\n  http.get('/api/appointments', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: [\r\n        {\r\n          _id: 'appt1',\r\n          patientId: 'patient123',\r\n          patientName: 'Jane Smith',\r\n          doctorId: 'doctor123',\r\n          doctorName: 'Dr. John Doe',\r\n          date: '2023-09-15',\r\n          timeSlot: '10:00 AM',\r\n          status: 'scheduled',\r\n          reason: 'Annual checkup',\r\n          createdAt: '2023-09-01T10:00:00Z'\r\n        },\r\n        {\r\n          _id: 'appt2',\r\n          patientId: 'patient123',\r\n          patientName: 'Jane Smith',\r\n          doctorId: 'doctor456',\r\n          doctorName: 'Dr. Sarah Wilson',\r\n          date: '2023-08-20',\r\n          timeSlot: '2:00 PM',\r\n          status: 'completed',\r\n          reason: 'Follow-up',\r\n          notes: 'Patient is recovering well.',\r\n          createdAt: '2023-08-01T14:00:00Z'\r\n        }\r\n      ]\r\n    })\r\n  }),\r\n\r\n  http.post('/api/appointments', async ({ request }) => {\r\n    const appointment = await request.json()\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: {\r\n        _id: 'new-appt-id',\r\n        ...appointment,\r\n        status: 'scheduled',\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    })\r\n  }),\r\n\r\n  http.delete('/api/appointments/:id', ({ params }) => {\r\n    const { id } = params\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      message: `Appointment ${id} cancelled successfully`\r\n    })\r\n  }),\r\n\r\n  // Doctors handlers\r\n  http.get('/api/doctors', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: [\r\n        {\r\n          _id: 'doctor123',\r\n          name: 'Dr. John Doe',\r\n          specialization: 'Cardiologist',\r\n          consultationFee: 150,\r\n          availableTimeSlots: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\r\n        },\r\n        {\r\n          _id: 'doctor456',\r\n          name: 'Dr. Sarah Wilson',\r\n          specialization: 'Dermatologist',\r\n          consultationFee: 120,\r\n          availableTimeSlots: ['9:30 AM', '10:30 AM', '11:30 AM', '2:30 PM', '3:30 PM']\r\n        }\r\n      ]\r\n    })\r\n  }),\r\n\r\n  http.get('/api/doctors/:id/timeslots', ({ params, request }) => {\r\n    const { id } = params\r\n    const url = new URL(request.url)\r\n    const date = url.searchParams.get('date')\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\r\n    })\r\n  })\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}