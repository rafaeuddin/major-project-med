{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrafa\\\\OneDrive\\\\Desktop\\\\code\\\\major project\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { AuthProvider } from './context/AuthContext';\nimport { BrowserRouter } from 'react-router-dom';\n\n// Set up a global fetch timeout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nif (process.env.NODE_ENV === 'development') {\n  // Store the original fetch function\n  const originalFetch = window.fetch;\n\n  // Create a version of fetch with timeout\n  window.fetch = async (...args) => {\n    const controller = new AbortController();\n    const {\n      signal\n    } = controller;\n\n    // Add signal to the options if it's not already present\n    if (args.length === 2 && !args[1].signal) {\n      args[1] = {\n        ...args[1],\n        signal\n      };\n    } else if (args.length === 1) {\n      args.push({\n        signal\n      });\n    }\n\n    // Set a 3 second timeout\n    const timeoutId = setTimeout(() => {\n      controller.abort();\n      console.warn(`Fetch timeout for: ${args[0]}`);\n    }, 3000);\n    try {\n      const response = await originalFetch(...args);\n      clearTimeout(timeoutId);\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      if (error.name === 'AbortError') {\n        console.error(`Fetch aborted for: ${args[0]}`);\n      }\n      throw error;\n    }\n  };\n}\n\n// Initialize mock service worker in development\nif (process.env.NODE_ENV === 'development') {\n  const {\n    worker\n  } = require('./mocks/browser');\n\n  // Start the worker with the updated configuration\n  worker.start({\n    onUnhandledRequest: 'bypass',\n    // Don't warn about unhandled requests\n    serviceWorker: {\n      url: '/mockServiceWorker.js',\n      options: {\n        // Faster timeout for the service worker (3 seconds instead of default)\n        timeoutDelay: 3000\n      }\n    },\n    quiet: false // Log all activity for debugging\n  }).catch(error => {\n    console.error('MSW worker start failed:', error);\n  });\n  console.log('Mock Service Worker started');\n}\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthProvider, {\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 69,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","AuthProvider","BrowserRouter","jsxDEV","_jsxDEV","process","env","NODE_ENV","originalFetch","window","fetch","args","controller","AbortController","signal","length","push","timeoutId","setTimeout","abort","console","warn","response","clearTimeout","error","name","worker","require","start","onUnhandledRequest","serviceWorker","url","options","timeoutDelay","quiet","catch","log","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n// Set up a global fetch timeout\r\nif (process.env.NODE_ENV === 'development') {\r\n  // Store the original fetch function\r\n  const originalFetch = window.fetch;\r\n  \r\n  // Create a version of fetch with timeout\r\n  window.fetch = async (...args) => {\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    \r\n    // Add signal to the options if it's not already present\r\n    if (args.length === 2 && !args[1].signal) {\r\n      args[1] = { ...args[1], signal };\r\n    } else if (args.length === 1) {\r\n      args.push({ signal });\r\n    }\r\n    \r\n    // Set a 3 second timeout\r\n    const timeoutId = setTimeout(() => {\r\n      controller.abort();\r\n      console.warn(`Fetch timeout for: ${args[0]}`);\r\n    }, 3000);\r\n    \r\n    try {\r\n      const response = await originalFetch(...args);\r\n      clearTimeout(timeoutId);\r\n      return response;\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      if (error.name === 'AbortError') {\r\n        console.error(`Fetch aborted for: ${args[0]}`);\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\n// Initialize mock service worker in development\r\nif (process.env.NODE_ENV === 'development') {\r\n  const { worker } = require('./mocks/browser');\r\n  \r\n  // Start the worker with the updated configuration\r\n  worker.start({\r\n    onUnhandledRequest: 'bypass', // Don't warn about unhandled requests\r\n    serviceWorker: {\r\n      url: '/mockServiceWorker.js',\r\n      options: {\r\n        // Faster timeout for the service worker (3 seconds instead of default)\r\n        timeoutDelay: 3000\r\n      }\r\n    },\r\n    quiet: false, // Log all activity for debugging\r\n  }).catch(error => {\r\n    console.error('MSW worker start failed:', error);\r\n  });\r\n  \r\n  console.log('Mock Service Worker started');\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <AuthProvider>\r\n        <App />\r\n      </AuthProvider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}