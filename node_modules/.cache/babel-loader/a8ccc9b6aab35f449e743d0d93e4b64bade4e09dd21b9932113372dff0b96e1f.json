{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrafa\\\\OneDrive\\\\Desktop\\\\code\\\\major project\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Test accounts for development\n  const testAccounts = {\n    'john.smith@example.com': {\n      _id: 'doctor123',\n      name: 'Dr. John Smith',\n      email: 'john.smith@example.com',\n      role: 'doctor',\n      password: 'password123',\n      specialization: 'Cardiology',\n      phone: '1234567890'\n    },\n    'alex@example.com': {\n      _id: 'patient123',\n      name: 'Alex Johnson',\n      email: 'alex@example.com',\n      role: 'patient',\n      password: 'password123',\n      phone: '9876543210',\n      medicalHistory: [{\n        title: 'Annual Checkup',\n        description: 'Regular checkup, all vitals normal',\n        date: '2023-01-15'\n      }],\n      emergencyContact: {\n        name: 'Sarah Johnson',\n        phone: '5551234567',\n        relationship: 'Spouse'\n      }\n    }\n  };\n  useEffect(() => {\n    // Check if there's a token in localStorage and fetch user data\n    const fetchUser = async () => {\n      if (token) {\n        try {\n          // For a real app, we would fetch from the server\n          // const response = await fetch('/api/users/me', {\n          //   headers: {\n          //     Authorization: `Bearer ${token}`\n          //   }\n          // });\n\n          // For development with test accounts\n          const userData = JSON.parse(localStorage.getItem('currentUser'));\n          if (userData) {\n            setCurrentUser(userData);\n          } else {\n            logout();\n          }\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n          setError('Failed to authenticate user');\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    fetchUser();\n  }, [token]);\n\n  // Login function with role parameter\n  const login = async (email, password, role) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // For development with test accounts\n      const testUser = testAccounts[email];\n      if (testUser && testUser.password === password) {\n        // Check if role matches\n        if (testUser.role !== role) {\n          setError(`The selected role does not match this account. This is a ${testUser.role} account.`);\n          setLoading(false);\n          return false;\n        }\n\n        // Generate a mock token\n        const mockToken = `mock-token-${Date.now()}`;\n        localStorage.setItem('token', mockToken);\n        localStorage.setItem('currentUser', JSON.stringify(testUser));\n        localStorage.setItem('userRole', testUser.role);\n        setToken(mockToken);\n        setCurrentUser(testUser);\n        return true;\n      }\n\n      // For a real app, we would make an API call\n      // const response = await fetch('/api/users/login', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify({ email, password, role })\n      // });\n\n      // const data = await response.json();\n\n      // if (response.ok) {\n      //   localStorage.setItem('token', data.token);\n      //   setToken(data.token);\n      //   \n      //   // Store user role in localStorage for persistence\n      //   localStorage.setItem('userRole', data.user.role);\n      //   \n      //   // Set current user with data from response\n      //   setCurrentUser(data.user);\n      //   \n      //   return true;\n      // }\n\n      // If we reach here with test accounts, credentials are invalid\n      setError('Invalid email or password');\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError('An error occurred during login');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // For development with test accounts\n      // Check if email already exists\n      if (testAccounts[userData.email]) {\n        setError('Email already exists');\n        return false;\n      }\n\n      // Create a new test user\n      const newUser = {\n        _id: `user${Date.now()}`,\n        ...userData\n      };\n\n      // Update test accounts (this is just for demo, in a real app we'd persist to a database)\n      // testAccounts[userData.email] = newUser;\n\n      // Generate a mock token\n      const mockToken = `mock-token-${Date.now()}`;\n      localStorage.setItem('token', mockToken);\n      localStorage.setItem('currentUser', JSON.stringify(newUser));\n      localStorage.setItem('userRole', newUser.role);\n      setToken(mockToken);\n      setCurrentUser(newUser);\n      return true;\n\n      // For a real app, we would make an API call\n      // const response = await fetch('/api/users/register', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify(userData)\n      // });\n      // \n      // const data = await response.json();\n      // \n      // if (response.ok) {\n      //   localStorage.setItem('token', data.token);\n      //   setToken(data.token);\n      //   \n      //   // Store user role in localStorage for persistence\n      //   localStorage.setItem('userRole', data.user.role);\n      //   \n      //   // Set current user with data from response\n      //   setCurrentUser(data.user);\n      //   \n      //   return true;\n      // } else {\n      //   setError(data.msg || 'Registration failed');\n      //   return false;\n      // }\n    } catch (error) {\n      console.error('Registration error:', error);\n      setError('An error occurred during registration');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('currentUser');\n    setToken(null);\n    setCurrentUser(null);\n  };\n\n  // Helper function for authenticated API requests\n  const authFetch = async (url, options = {}) => {\n    if (!token) {\n      throw new Error('No authentication token');\n    }\n    const authOptions = {\n      ...options,\n      headers: {\n        ...options.headers,\n        Authorization: `Bearer ${token}`\n      }\n    };\n\n    // For a real app, we would make an actual API call\n    // const response = await fetch(url, authOptions);\n\n    // For development with test accounts, we'll mock responses\n    let response;\n\n    // Mock appointment data\n    if (url === '/api/appointments') {\n      const mockAppointments = {\n        appointments: [{\n          _id: 'appt1',\n          patientId: testAccounts['alex@example.com'],\n          doctorId: testAccounts['john.smith@example.com'],\n          date: new Date(Date.now() + 86400000).toISOString(),\n          // Tomorrow\n          timeSlot: '10:00 AM',\n          reason: 'Annual checkup',\n          status: 'scheduled'\n        }, {\n          _id: 'appt2',\n          patientId: testAccounts['alex@example.com'],\n          doctorId: testAccounts['john.smith@example.com'],\n          date: new Date(Date.now() - 86400000).toISOString(),\n          // Yesterday\n          timeSlot: '02:00 PM',\n          reason: 'Follow-up',\n          status: 'completed',\n          notes: 'Patient is recovering well'\n        }]\n      };\n      response = {\n        ok: true,\n        json: async () => mockAppointments\n      };\n    } else {\n      // Default mock response\n      response = {\n        ok: true,\n        json: async () => ({\n          message: 'Mock response'\n        })\n      };\n    }\n    if (response.status === 401) {\n      // Token expired or invalid\n      logout();\n      throw new Error('Session expired. Please login again.');\n    }\n    return response;\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    authFetch\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"+r8libbRK1V2EQLs13q04oAaaiQ=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","token","setToken","localStorage","getItem","loading","setLoading","error","setError","testAccounts","_id","name","email","role","password","specialization","phone","medicalHistory","title","description","date","emergencyContact","relationship","fetchUser","userData","JSON","parse","logout","console","login","testUser","mockToken","Date","now","setItem","stringify","register","newUser","removeItem","authFetch","url","options","Error","authOptions","headers","Authorization","response","mockAppointments","appointments","patientId","doctorId","toISOString","timeSlot","reason","status","notes","ok","json","message","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Test accounts for development\r\n  const testAccounts = {\r\n    'john.smith@example.com': {\r\n      _id: 'doctor123',\r\n      name: 'Dr. John Smith',\r\n      email: 'john.smith@example.com',\r\n      role: 'doctor',\r\n      password: 'password123',\r\n      specialization: 'Cardiology',\r\n      phone: '1234567890'\r\n    },\r\n    'alex@example.com': {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      role: 'patient',\r\n      password: 'password123',\r\n      phone: '9876543210',\r\n      medicalHistory: [\r\n        {\r\n          title: 'Annual Checkup',\r\n          description: 'Regular checkup, all vitals normal',\r\n          date: '2023-01-15'\r\n        }\r\n      ],\r\n      emergencyContact: {\r\n        name: 'Sarah Johnson',\r\n        phone: '5551234567',\r\n        relationship: 'Spouse'\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if there's a token in localStorage and fetch user data\r\n    const fetchUser = async () => {\r\n      if (token) {\r\n        try {\r\n          // For a real app, we would fetch from the server\r\n          // const response = await fetch('/api/users/me', {\r\n          //   headers: {\r\n          //     Authorization: `Bearer ${token}`\r\n          //   }\r\n          // });\r\n\r\n          // For development with test accounts\r\n          const userData = JSON.parse(localStorage.getItem('currentUser'));\r\n          if (userData) {\r\n            setCurrentUser(userData);\r\n          } else {\r\n            logout();\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n          setError('Failed to authenticate user');\r\n          logout();\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchUser();\r\n  }, [token]);\r\n\r\n  // Login function with role parameter\r\n  const login = async (email, password, role) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // For development with test accounts\r\n      const testUser = testAccounts[email];\r\n      \r\n      if (testUser && testUser.password === password) {\r\n        // Check if role matches\r\n        if (testUser.role !== role) {\r\n          setError(`The selected role does not match this account. This is a ${testUser.role} account.`);\r\n          setLoading(false);\r\n          return false;\r\n        }\r\n        \r\n        // Generate a mock token\r\n        const mockToken = `mock-token-${Date.now()}`;\r\n        localStorage.setItem('token', mockToken);\r\n        localStorage.setItem('currentUser', JSON.stringify(testUser));\r\n        localStorage.setItem('userRole', testUser.role);\r\n        \r\n        setToken(mockToken);\r\n        setCurrentUser(testUser);\r\n        \r\n        return true;\r\n      }\r\n      \r\n      // For a real app, we would make an API call\r\n      // const response = await fetch('/api/users/login', {\r\n      //   method: 'POST',\r\n      //   headers: {\r\n      //     'Content-Type': 'application/json'\r\n      //   },\r\n      //   body: JSON.stringify({ email, password, role })\r\n      // });\r\n      \r\n      // const data = await response.json();\r\n      \r\n      // if (response.ok) {\r\n      //   localStorage.setItem('token', data.token);\r\n      //   setToken(data.token);\r\n      //   \r\n      //   // Store user role in localStorage for persistence\r\n      //   localStorage.setItem('userRole', data.user.role);\r\n      //   \r\n      //   // Set current user with data from response\r\n      //   setCurrentUser(data.user);\r\n      //   \r\n      //   return true;\r\n      // }\r\n\r\n      // If we reach here with test accounts, credentials are invalid\r\n      setError('Invalid email or password');\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      setError('An error occurred during login');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // For development with test accounts\r\n      // Check if email already exists\r\n      if (testAccounts[userData.email]) {\r\n        setError('Email already exists');\r\n        return false;\r\n      }\r\n      \r\n      // Create a new test user\r\n      const newUser = {\r\n        _id: `user${Date.now()}`,\r\n        ...userData\r\n      };\r\n      \r\n      // Update test accounts (this is just for demo, in a real app we'd persist to a database)\r\n      // testAccounts[userData.email] = newUser;\r\n      \r\n      // Generate a mock token\r\n      const mockToken = `mock-token-${Date.now()}`;\r\n      localStorage.setItem('token', mockToken);\r\n      localStorage.setItem('currentUser', JSON.stringify(newUser));\r\n      localStorage.setItem('userRole', newUser.role);\r\n      \r\n      setToken(mockToken);\r\n      setCurrentUser(newUser);\r\n      \r\n      return true;\r\n      \r\n      // For a real app, we would make an API call\r\n      // const response = await fetch('/api/users/register', {\r\n      //   method: 'POST',\r\n      //   headers: {\r\n      //     'Content-Type': 'application/json'\r\n      //   },\r\n      //   body: JSON.stringify(userData)\r\n      // });\r\n      // \r\n      // const data = await response.json();\r\n      // \r\n      // if (response.ok) {\r\n      //   localStorage.setItem('token', data.token);\r\n      //   setToken(data.token);\r\n      //   \r\n      //   // Store user role in localStorage for persistence\r\n      //   localStorage.setItem('userRole', data.user.role);\r\n      //   \r\n      //   // Set current user with data from response\r\n      //   setCurrentUser(data.user);\r\n      //   \r\n      //   return true;\r\n      // } else {\r\n      //   setError(data.msg || 'Registration failed');\r\n      //   return false;\r\n      // }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      setError('An error occurred during registration');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userRole');\r\n    localStorage.removeItem('currentUser');\r\n    setToken(null);\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  // Helper function for authenticated API requests\r\n  const authFetch = async (url, options = {}) => {\r\n    if (!token) {\r\n      throw new Error('No authentication token');\r\n    }\r\n\r\n    const authOptions = {\r\n      ...options,\r\n      headers: {\r\n        ...options.headers,\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    };\r\n\r\n    // For a real app, we would make an actual API call\r\n    // const response = await fetch(url, authOptions);\r\n    \r\n    // For development with test accounts, we'll mock responses\r\n    let response;\r\n    \r\n    // Mock appointment data\r\n    if (url === '/api/appointments') {\r\n      const mockAppointments = {\r\n        appointments: [\r\n          {\r\n            _id: 'appt1',\r\n            patientId: testAccounts['alex@example.com'],\r\n            doctorId: testAccounts['john.smith@example.com'],\r\n            date: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\r\n            timeSlot: '10:00 AM',\r\n            reason: 'Annual checkup',\r\n            status: 'scheduled'\r\n          },\r\n          {\r\n            _id: 'appt2',\r\n            patientId: testAccounts['alex@example.com'],\r\n            doctorId: testAccounts['john.smith@example.com'],\r\n            date: new Date(Date.now() - 86400000).toISOString(), // Yesterday\r\n            timeSlot: '02:00 PM',\r\n            reason: 'Follow-up',\r\n            status: 'completed',\r\n            notes: 'Patient is recovering well'\r\n          }\r\n        ]\r\n      };\r\n      \r\n      response = {\r\n        ok: true,\r\n        json: async () => mockAppointments\r\n      };\r\n    } else {\r\n      // Default mock response\r\n      response = {\r\n        ok: true,\r\n        json: async () => ({ message: 'Mock response' })\r\n      };\r\n    }\r\n    \r\n    if (response.status === 401) {\r\n      // Token expired or invalid\r\n      logout();\r\n      throw new Error('Session expired. Please login again.');\r\n    }\r\n    \r\n    return response;\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    authFetch\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}