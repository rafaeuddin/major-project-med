{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrafa\\\\OneDrive\\\\Desktop\\\\code\\\\major project\\\\src\\\\components\\\\CalendarComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarComponent = ({\n  onDateSelect,\n  onTimeSlotSelect,\n  selectedDate,\n  selectedTimeSlot,\n  doctorId\n}) => {\n  _s();\n  const [date, setDate] = useState(selectedDate || new Date());\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [localSelectedTimeSlot, setLocalSelectedTimeSlot] = useState(selectedTimeSlot);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\n  const auth = useAuth();\n  const authFetch = auth === null || auth === void 0 ? void 0 : auth.authFetch;\n  useEffect(() => {\n    // Fetch time slots from the API\n    const fetchTimeSlots = async () => {\n      setIsLoading(true);\n      try {\n        // If doctorId is provided, fetch real data from API\n        if (doctorId) {\n          const formattedDate = date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n          const response = await fetch(`/api/appointments/available-slots?date=${formattedDate}&doctorId=${doctorId}`);\n          if (response.ok) {\n            const data = await response.json();\n            setTimeSlots(data.availableTimeSlots);\n          } else {\n            console.error('Error fetching time slots');\n            setTimeSlots([]);\n          }\n        } else {\n          // Fallback to the demo data if no doctorId is provided\n          await new Promise(resolve => setTimeout(resolve, 600)); // Simulate network delay\n          const availableSlots = generateRandomAvailability(date);\n          setTimeSlots(availableSlots);\n        }\n      } catch (error) {\n        console.error('Error fetching time slots:', error);\n        setTimeSlots([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTimeSlots();\n  }, [date, doctorId]);\n  useEffect(() => {\n    setDate(selectedDate || new Date());\n  }, [selectedDate]);\n  useEffect(() => {\n    setLocalSelectedTimeSlot(selectedTimeSlot);\n  }, [selectedTimeSlot]);\n\n  // Generate doctor availability randomly for demo purposes\n  const generateRandomAvailability = date => {\n    // Seed the random generator with the date to make it consistent for the same date\n    const baseSeed = date.getDate() + date.getMonth() * 100 + date.getFullYear() * 10000;\n    let seedValue = baseSeed;\n    const randomGen = () => {\n      seedValue += 1;\n      const x = Math.sin(seedValue) * 10000;\n      return x - Math.floor(x);\n    };\n\n    // Generate between 3 and 7 slots based on weekday (fewer on weekends)\n    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n    const numSlots = isWeekend ? Math.floor(randomGen() * 3) + 2 :\n    // 2-4 slots on weekends\n    Math.floor(randomGen() * 5) + 3; // 3-7 slots on weekdays\n\n    const allPossibleSlots = ['08:00 AM', '09:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM', '05:00 PM'];\n\n    // Shuffle array and take the first numSlots elements\n    const shuffledSlots = [...allPossibleSlots].sort(() => 0.5 - randomGen());\n    return shuffledSlots.slice(0, numSlots);\n  };\n  const handleDateChange = newDate => {\n    setDate(newDate);\n    setLocalSelectedTimeSlot(null);\n    if (onDateSelect) {\n      onDateSelect(newDate);\n    }\n  };\n  const handleTimeSlotSelection = slot => {\n    setLocalSelectedTimeSlot(slot);\n    if (onTimeSlotSelect) {\n      onTimeSlotSelect(slot);\n    }\n  };\n\n  // Customize the tile content to show availability indicators\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    if (view !== 'month') return null;\n\n    // Disable past dates\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    if (date < today) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile-content tile-past\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Simplified availability indicator based on weekday\n    // In a real app, this would come from actual availability data\n    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n    const availabilityClass = isWeekend ? 'low' : date.getDay() % 2 === 0 ? 'medium' : 'high';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tile-content availability-${availabilityClass}`,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Add custom class for date tile to indicate if it's past, today, or future\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view !== 'month') return '';\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    if (date < today) {\n      return 'past-date';\n    } else if (date.getTime() === today.getTime()) {\n      return 'today-date';\n    }\n    return 'future-date';\n  };\n\n  // Track month changes for animation purposes\n  const handleActiveStartDateChange = ({\n    activeStartDate\n  }) => {\n    const newMonth = activeStartDate.getMonth();\n    setCurrentMonth(newMonth);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select an Appointment Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-subtitle\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"availability-indicator high\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), \" High Availability\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"availability-indicator medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), \" Medium\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"availability-indicator low\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), \" Low\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        onChange: handleDateChange,\n        value: date,\n        tileContent: tileContent,\n        tileClassName: tileClassName,\n        minDate: new Date(),\n        onActiveStartDateChange: handleActiveStartDateChange,\n        prevLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-chevron-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 22\n        }, this),\n        nextLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-chevron-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, `calendar-${currentMonth}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-selection-info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected date: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: date.toDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select a Time Slot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-slots-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-animation\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Checking doctor's availability...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this) : timeSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-slots\",\n      children: timeSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTimeSlotSelection(slot),\n        className: localSelectedTimeSlot === slot ? 'selected' : '',\n        style: {\n          animationDelay: `${index * 0.05}s`\n        },\n        children: slot\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-slots-available\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No time slots available for this date. Please select another day.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), localSelectedTimeSlot && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-slot-info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You've selected: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: localSelectedTimeSlot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 31\n        }, this), \" on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: date.toDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 75\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarComponent, \"eEc80a98tCoF8FTmbvaGH2agapc=\", false, function () {\n  return [useAuth];\n});\n_c = CalendarComponent;\nexport default CalendarComponent;\nvar _c;\n$RefreshReg$(_c, \"CalendarComponent\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","useAuth","jsxDEV","_jsxDEV","CalendarComponent","onDateSelect","onTimeSlotSelect","selectedDate","selectedTimeSlot","doctorId","_s","date","setDate","Date","timeSlots","setTimeSlots","localSelectedTimeSlot","setLocalSelectedTimeSlot","isLoading","setIsLoading","currentMonth","setCurrentMonth","getMonth","auth","authFetch","fetchTimeSlots","formattedDate","toISOString","split","response","fetch","ok","data","json","availableTimeSlots","console","error","Promise","resolve","setTimeout","availableSlots","generateRandomAvailability","baseSeed","getDate","getFullYear","seedValue","randomGen","x","Math","sin","floor","isWeekend","getDay","numSlots","allPossibleSlots","shuffledSlots","sort","slice","handleDateChange","newDate","handleTimeSlotSelection","slot","tileContent","view","today","setHours","className","children","fileName","_jsxFileName","lineNumber","columnNumber","availabilityClass","tileClassName","getTime","handleActiveStartDateChange","activeStartDate","newMonth","onChange","value","minDate","onActiveStartDateChange","prevLabel","nextLabel","toDateString","length","map","index","onClick","style","animationDelay","_c","$RefreshReg$"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/components/CalendarComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst CalendarComponent = ({ onDateSelect, onTimeSlotSelect, selectedDate, selectedTimeSlot, doctorId }) => {\r\n  const [date, setDate] = useState(selectedDate || new Date());\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [localSelectedTimeSlot, setLocalSelectedTimeSlot] = useState(selectedTimeSlot);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\r\n  const auth = useAuth();\r\n  const authFetch = auth?.authFetch;\r\n\r\n  useEffect(() => {\r\n    // Fetch time slots from the API\r\n    const fetchTimeSlots = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        // If doctorId is provided, fetch real data from API\r\n        if (doctorId) {\r\n          const formattedDate = date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\r\n          const response = await fetch(`/api/appointments/available-slots?date=${formattedDate}&doctorId=${doctorId}`);\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setTimeSlots(data.availableTimeSlots);\r\n          } else {\r\n            console.error('Error fetching time slots');\r\n            setTimeSlots([]);\r\n          }\r\n        } else {\r\n          // Fallback to the demo data if no doctorId is provided\r\n          await new Promise(resolve => setTimeout(resolve, 600)); // Simulate network delay\r\n          const availableSlots = generateRandomAvailability(date);\r\n          setTimeSlots(availableSlots);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching time slots:', error);\r\n        setTimeSlots([]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchTimeSlots();\r\n  }, [date, doctorId]);\r\n\r\n  useEffect(() => {\r\n    setDate(selectedDate || new Date());\r\n  }, [selectedDate]);\r\n\r\n  useEffect(() => {\r\n    setLocalSelectedTimeSlot(selectedTimeSlot);\r\n  }, [selectedTimeSlot]);\r\n\r\n  // Generate doctor availability randomly for demo purposes\r\n  const generateRandomAvailability = (date) => {\r\n    // Seed the random generator with the date to make it consistent for the same date\r\n    const baseSeed = date.getDate() + date.getMonth() * 100 + date.getFullYear() * 10000;\r\n    let seedValue = baseSeed;\r\n    \r\n    const randomGen = () => {\r\n      seedValue += 1;\r\n      const x = Math.sin(seedValue) * 10000;\r\n      return x - Math.floor(x);\r\n    };\r\n\r\n    // Generate between 3 and 7 slots based on weekday (fewer on weekends)\r\n    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\r\n    const numSlots = isWeekend ? \r\n      Math.floor(randomGen() * 3) + 2 : // 2-4 slots on weekends\r\n      Math.floor(randomGen() * 5) + 3;  // 3-7 slots on weekdays\r\n\r\n    const allPossibleSlots = [\r\n      '08:00 AM', '09:00 AM', '10:00 AM', '11:00 AM', \r\n      '12:00 PM', '01:00 PM', '02:00 PM', '03:00 PM', \r\n      '04:00 PM', '05:00 PM'\r\n    ];\r\n\r\n    // Shuffle array and take the first numSlots elements\r\n    const shuffledSlots = [...allPossibleSlots].sort(() => 0.5 - randomGen());\r\n    return shuffledSlots.slice(0, numSlots);\r\n  };\r\n\r\n  const handleDateChange = (newDate) => {\r\n    setDate(newDate);\r\n    setLocalSelectedTimeSlot(null);\r\n    \r\n    if (onDateSelect) {\r\n      onDateSelect(newDate);\r\n    }\r\n  };\r\n\r\n  const handleTimeSlotSelection = (slot) => {\r\n    setLocalSelectedTimeSlot(slot);\r\n    \r\n    if (onTimeSlotSelect) {\r\n      onTimeSlotSelect(slot);\r\n    }\r\n  };\r\n\r\n  // Customize the tile content to show availability indicators\r\n  const tileContent = ({ date, view }) => {\r\n    if (view !== 'month') return null;\r\n    \r\n    // Disable past dates\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    if (date < today) {\r\n      return (\r\n        <div className=\"tile-content tile-past\">\r\n          <span className=\"dot\"></span>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    // Simplified availability indicator based on weekday\r\n    // In a real app, this would come from actual availability data\r\n    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\r\n    const availabilityClass = isWeekend ? 'low' : \r\n      (date.getDay() % 2 === 0 ? 'medium' : 'high');\r\n    \r\n    return (\r\n      <div className={`tile-content availability-${availabilityClass}`}>\r\n        <span className=\"dot\"></span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Add custom class for date tile to indicate if it's past, today, or future\r\n  const tileClassName = ({ date, view }) => {\r\n    if (view !== 'month') return '';\r\n    \r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    if (date < today) {\r\n      return 'past-date';\r\n    } else if (date.getTime() === today.getTime()) {\r\n      return 'today-date';\r\n    }\r\n    \r\n    return 'future-date';\r\n  };\r\n\r\n  // Track month changes for animation purposes\r\n  const handleActiveStartDateChange = ({ activeStartDate }) => {\r\n    const newMonth = activeStartDate.getMonth();\r\n    setCurrentMonth(newMonth);\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar-component\">\r\n      <div className=\"calendar-header\">\r\n        <h2>Select an Appointment Date</h2>\r\n        <div className=\"calendar-subtitle\">\r\n          <span className=\"availability-indicator high\"></span> High Availability\r\n          <span className=\"availability-indicator medium\"></span> Medium\r\n          <span className=\"availability-indicator low\"></span> Low\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"calendar-wrapper\" key={`calendar-${currentMonth}`}>\r\n        <Calendar\r\n          onChange={handleDateChange}\r\n          value={date}\r\n          tileContent={tileContent}\r\n          tileClassName={tileClassName}\r\n          minDate={new Date()}\r\n          onActiveStartDateChange={handleActiveStartDateChange}\r\n          prevLabel={<i className=\"fas fa-chevron-left\"></i>}\r\n          nextLabel={<i className=\"fas fa-chevron-right\"></i>}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"date-selection-info\">\r\n        <p>Selected date: <strong>{date.toDateString()}</strong></p>\r\n      </div>\r\n\r\n      <h3>Select a Time Slot</h3>\r\n      \r\n      {isLoading ? (\r\n        <div className=\"time-slots-loading\">\r\n          <div className=\"loading-animation\">\r\n            <div></div><div></div><div></div><div></div>\r\n          </div>\r\n          <p>Checking doctor's availability...</p>\r\n        </div>\r\n      ) : timeSlots.length > 0 ? (\r\n        <div className=\"time-slots\">\r\n          {timeSlots.map((slot, index) => (\r\n            <button\r\n              key={index}\r\n              onClick={() => handleTimeSlotSelection(slot)}\r\n              className={localSelectedTimeSlot === slot ? 'selected' : ''}\r\n              style={{\r\n                animationDelay: `${index * 0.05}s`\r\n              }}\r\n            >\r\n              {slot}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"no-slots-available\">\r\n          <p>No time slots available for this date. Please select another day.</p>\r\n        </div>\r\n      )}\r\n\r\n      {localSelectedTimeSlot && (\r\n        <div className=\"selected-slot-info\">\r\n          <p>You've selected: <strong>{localSelectedTimeSlot}</strong> on <strong>{date.toDateString()}</strong></p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}