{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrafa\\\\OneDrive\\\\Desktop\\\\code\\\\major project\\\\src\\\\components\\\\DoctorChatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport '../styles/DoctorChatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DoctorChatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hello! I'm Dr. AI, your virtual healthcare assistant. How can I help you today?\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const messagesEndRef = useRef(null);\n\n  // Medical knowledge base - simplified for demo\n  const medicalKnowledge = [{\n    keywords: ['headache', 'head pain', 'migraine'],\n    response: \"It sounds like you're experiencing a headache. This could be due to stress, dehydration, lack of sleep, or other factors. If it's severe, persistent, or accompanied by other symptoms like fever, vision changes, or neck stiffness, you should consult with a doctor. Would you like to book an appointment?\"\n  }, {\n    keywords: ['fever', 'temperature', 'hot', 'chills'],\n    response: \"A fever is often a sign that your body is fighting an infection. Make sure to stay hydrated and rest. If your temperature is above 103°F (39.4°C), lasts more than three days, or is accompanied by severe symptoms, you should seek medical attention. Would you like to discuss this with a doctor?\"\n  }, {\n    keywords: ['cough', 'coughing', 'chest congestion'],\n    response: \"Coughing can be caused by various factors including allergies, cold, flu, or respiratory infections. If your cough is persistent (lasting more than 2 weeks), produces discolored mucus, or is accompanied by shortness of breath, you should consult with a healthcare professional. Shall I help you book an appointment?\"\n  }, {\n    keywords: ['cold', 'flu', 'stuffy nose', 'runny nose', 'sore throat'],\n    response: \"Common cold symptoms typically resolve within 7-10 days. Stay hydrated, get plenty of rest, and consider over-the-counter medications for symptom relief. If symptoms worsen or don't improve, it might be good to see a doctor. Would you like to schedule a consultation?\"\n  }, {\n    keywords: ['stomach', 'abdomen', 'pain', 'nausea', 'vomiting', 'diarrhea'],\n    response: \"Stomach issues can result from various causes including food poisoning, viruses, or digestive disorders. Ensure you stay hydrated. If symptoms are severe, persistent, or accompanied by fever, blood in stool, or intense pain, medical attention is recommended. Would you like to speak with a specialist?\"\n  }, {\n    keywords: ['rash', 'skin', 'itchy', 'bumps', 'hives'],\n    response: \"Skin rashes can be caused by allergies, infections, or other conditions. Avoid scratching and irritating the area. If the rash is widespread, painful, or accompanied by other symptoms like fever or difficulty breathing, you should consult a doctor. Would you like to see a dermatologist?\"\n  }, {\n    keywords: ['appointment', 'book', 'schedule', 'doctor', 'visit'],\n    response: \"I'd be happy to help you book an appointment. You can click on 'Book New Appointment' in your dashboard, or I can guide you to the right specialist based on your symptoms. What type of doctor would you like to see?\"\n  }, {\n    keywords: ['thank', 'thanks', 'appreciate', 'helpful'],\n    response: \"You're welcome! I'm here to help. Is there anything else you'd like to know about your health today?\"\n  }];\n\n  // Specialty recommendations based on symptoms\n  const specialtyRecommendations = {\n    headache: ['Neurology', 'General Physician'],\n    migraine: ['Neurology'],\n    fever: ['General Physician', 'Infectious Disease'],\n    cough: ['Pulmonology', 'General Physician'],\n    'chest pain': ['Cardiology', 'Emergency Medicine'],\n    'shortness of breath': ['Pulmonology', 'Cardiology'],\n    rash: ['Dermatology', 'Allergy and Immunology'],\n    'stomach pain': ['Gastroenterology', 'General Physician'],\n    nausea: ['Gastroenterology', 'General Physician'],\n    vomiting: ['Gastroenterology', 'Emergency Medicine'],\n    diarrhea: ['Gastroenterology'],\n    'joint pain': ['Rheumatology', 'Orthopedics'],\n    'back pain': ['Orthopedics', 'Neurology', 'Physical Therapy'],\n    'eye pain': ['Ophthalmology'],\n    'vision problems': ['Ophthalmology', 'Neurology'],\n    'ear pain': ['Otolaryngology (ENT)'],\n    'hearing loss': ['Otolaryngology (ENT)', 'Audiology'],\n    'sore throat': ['Otolaryngology (ENT)', 'General Physician'],\n    'urinary problems': ['Urology', 'Nephrology'],\n    depression: ['Psychiatry', 'Psychology'],\n    anxiety: ['Psychiatry', 'Psychology'],\n    'sleep problems': ['Sleep Medicine', 'Psychiatry'],\n    'high blood pressure': ['Cardiology', 'Internal Medicine'],\n    diabetes: ['Endocrinology', 'Internal Medicine'],\n    'pregnancy': ['Obstetrics and Gynecology']\n  };\n\n  // Severity assessment questions\n  const severityQuestions = {\n    headache: [\"Is this the worst headache of your life?\", \"Are you experiencing any visual disturbances or difficulty speaking?\", \"Is your headache accompanied by a stiff neck or fever?\"],\n    fever: [\"How high is your temperature?\", \"Is your fever accompanied by a rash?\", \"Are you experiencing any difficulty breathing?\"],\n    cough: [\"Are you coughing up blood?\", \"Are you experiencing chest pain when coughing?\", \"Have you been coughing for more than 2 weeks?\"],\n    'chest pain': [\"Is the pain severe or crushing?\", \"Does the pain radiate to your arm, jaw, or back?\", \"Are you experiencing shortness of breath or sweating with the pain?\"]\n  };\n\n  // Handle sending a new message\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n    const newUserMessage = {\n      id: messages.length + 1,\n      text: input.trim(),\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, newUserMessage]);\n    setInput('');\n    setIsTyping(true);\n\n    // Simulate bot response after a short delay\n    setTimeout(() => {\n      const botResponse = generateResponse(input);\n      const newBotMessage = {\n        id: messages.length + 2,\n        text: botResponse,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, newBotMessage]);\n      setIsTyping(false);\n      if (!isChatOpen) {\n        setUnreadCount(prev => prev + 1);\n      }\n\n      // If the response includes a recommendation for emergency care, add a follow-up message\n      if (botResponse.includes(\"emergency\") || botResponse.includes(\"911\")) {\n        setTimeout(() => {\n          const emergencyFollowup = {\n            id: messages.length + 3,\n            text: \"If you're experiencing a medical emergency, please call emergency services immediately. Don't wait for an online response.\",\n            sender: 'bot',\n            timestamp: new Date(Date.now() + 1000)\n          };\n          setMessages(prev => [...prev, emergencyFollowup]);\n        }, 1000);\n      }\n\n      // If response is about booking an appointment, provide specialty recommendations\n      else if (botResponse.includes(\"appointment\") || botResponse.includes(\"specialist\")) {\n        analyzeSymptoms(input);\n      }\n    }, 1000 + Math.random() * 1000);\n  };\n\n  // Analyze symptoms and recommend specialists\n  const analyzeSymptoms = userInput => {\n    const input = userInput.toLowerCase();\n    const detectedSymptoms = [];\n\n    // Check for symptoms mentioned in the user input\n    Object.keys(specialtyRecommendations).forEach(symptom => {\n      if (input.includes(symptom)) {\n        detectedSymptoms.push(symptom);\n      }\n    });\n\n    // If symptoms are detected, recommend specialists\n    if (detectedSymptoms.length > 0) {\n      // Get unique specialties across all detected symptoms\n      const recommendedSpecialties = new Set();\n      detectedSymptoms.forEach(symptom => {\n        specialtyRecommendations[symptom].forEach(specialty => {\n          recommendedSpecialties.add(specialty);\n        });\n      });\n\n      // Check if any symptoms require severity assessment\n      const severityCheckNeeded = detectedSymptoms.some(symptom => severityQuestions[symptom]);\n      setTimeout(() => {\n        // First, ask severity questions if needed\n        if (severityCheckNeeded) {\n          const symptomWithQuestions = detectedSymptoms.find(symptom => severityQuestions[symptom]);\n          const randomQuestion = severityQuestions[symptomWithQuestions][Math.floor(Math.random() * severityQuestions[symptomWithQuestions].length)];\n          const severityMessage = {\n            id: messages.length + 3,\n            text: `${randomQuestion} This will help me better understand the urgency of your situation.`,\n            sender: 'bot',\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, severityMessage]);\n        }\n\n        // Then recommend specialists\n        setTimeout(() => {\n          const specialtiesArray = Array.from(recommendedSpecialties);\n          let recommendationText = `Based on your symptoms (${detectedSymptoms.join(', ')}), you might benefit from seeing a specialist in: ${specialtiesArray.join(', ')}. `;\n          if (specialtiesArray.includes('Emergency Medicine')) {\n            recommendationText += \"Some of your symptoms may require immediate medical attention. Please consider seeking emergency care if your symptoms are severe.\";\n          } else {\n            recommendationText += \"Would you like to book an appointment with one of these specialists?\";\n          }\n          const recommendationMessage = {\n            id: messages.length + 4,\n            text: recommendationText,\n            sender: 'bot',\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, recommendationMessage]);\n        }, severityCheckNeeded ? 2000 : 0);\n      }, 1500);\n    }\n  };\n\n  // Generate a response based on user input\n  const generateResponse = userInput => {\n    const input = userInput.toLowerCase();\n\n    // Check if input matches any keywords in our medical knowledge base\n    for (const item of medicalKnowledge) {\n      if (item.keywords.some(keyword => input.includes(keyword))) {\n        return item.response;\n      }\n    }\n\n    // Default responses if no specific condition is matched\n    const defaultResponses = [\"I understand you're concerned about your health. Could you provide more details about your symptoms?\", \"Thanks for sharing that. Based on what you've described, it might be helpful to consult with a doctor. Would you like to book an appointment?\", \"I'm here to help guide you, but for a proper diagnosis, you should speak with a healthcare professional. Can I help you schedule an appointment?\", \"I'm not able to provide a specific diagnosis for your situation. Would you like me to help you connect with a doctor who can help?\", \"Your health is important. While I can provide general information, a doctor can give you personalized advice. Would you like to book a consultation?\"];\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n  };\n\n  // Scroll to bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Reset unread count when chat is opened\n  useEffect(() => {\n    if (isChatOpen) {\n      setUnreadCount(0);\n    }\n  }, [isChatOpen]);\n\n  // Format timestamp\n  const formatTime = date => {\n    return new Date(date).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-toggle\",\n      onClick: () => setIsChatOpen(!isChatOpen),\n      children: isChatOpen ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-icon\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chat-icon\",\n          children: \"\\uD83D\\uDC68\\u200D\\u2695\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Dr. AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unread-badge\",\n          children: unreadCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), isChatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"doctor-avatar\",\n            children: \"\\uD83D\\uDC68\\u200D\\u2695\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"doctor-name\",\n            children: \"Dr. AI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-indicator\",\n            children: \"\\u25CF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"chat-subtitle\",\n          children: \"Virtual Healthcare Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: formatTime(message.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content typing\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chat-input\",\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type your health question here...\",\n          disabled: isTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: input.trim() === '' || isTyping,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"send-icon\",\n            children: \"\\u27A4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-disclaimer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is an AI assistant and not a replacement for professional medical advice. In case of emergency, call 911 or your local emergency number.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorChatbot, \"Zu9bShzQumgmXQMI9i68/1StJSA=\");\n_c = DoctorChatbot;\nexport default DoctorChatbot;\nvar _c;\n$RefreshReg$(_c, \"DoctorChatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","DoctorChatbot","_s","messages","setMessages","id","text","sender","timestamp","Date","input","setInput","isTyping","setIsTyping","isChatOpen","setIsChatOpen","unreadCount","setUnreadCount","messagesEndRef","medicalKnowledge","keywords","response","specialtyRecommendations","headache","migraine","fever","cough","rash","nausea","vomiting","diarrhea","depression","anxiety","diabetes","severityQuestions","handleSendMessage","e","preventDefault","trim","newUserMessage","length","prev","setTimeout","botResponse","generateResponse","newBotMessage","includes","emergencyFollowup","now","analyzeSymptoms","Math","random","userInput","toLowerCase","detectedSymptoms","Object","keys","forEach","symptom","push","recommendedSpecialties","Set","specialty","add","severityCheckNeeded","some","symptomWithQuestions","find","randomQuestion","floor","severityMessage","specialtiesArray","Array","from","recommendationText","join","recommendationMessage","item","keyword","defaultResponses","_messagesEndRef$curre","current","scrollIntoView","behavior","formatTime","date","toLocaleTimeString","hour","minute","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","message","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/components/DoctorChatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport '../styles/DoctorChatbot.css';\r\n\r\nconst DoctorChatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      id: 1,\r\n      text: \"Hello! I'm Dr. AI, your virtual healthcare assistant. How can I help you today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [isChatOpen, setIsChatOpen] = useState(false);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Medical knowledge base - simplified for demo\r\n  const medicalKnowledge = [\r\n    {\r\n      keywords: ['headache', 'head pain', 'migraine'],\r\n      response: \"It sounds like you're experiencing a headache. This could be due to stress, dehydration, lack of sleep, or other factors. If it's severe, persistent, or accompanied by other symptoms like fever, vision changes, or neck stiffness, you should consult with a doctor. Would you like to book an appointment?\"\r\n    },\r\n    {\r\n      keywords: ['fever', 'temperature', 'hot', 'chills'],\r\n      response: \"A fever is often a sign that your body is fighting an infection. Make sure to stay hydrated and rest. If your temperature is above 103°F (39.4°C), lasts more than three days, or is accompanied by severe symptoms, you should seek medical attention. Would you like to discuss this with a doctor?\"\r\n    },\r\n    {\r\n      keywords: ['cough', 'coughing', 'chest congestion'],\r\n      response: \"Coughing can be caused by various factors including allergies, cold, flu, or respiratory infections. If your cough is persistent (lasting more than 2 weeks), produces discolored mucus, or is accompanied by shortness of breath, you should consult with a healthcare professional. Shall I help you book an appointment?\"\r\n    },\r\n    {\r\n      keywords: ['cold', 'flu', 'stuffy nose', 'runny nose', 'sore throat'],\r\n      response: \"Common cold symptoms typically resolve within 7-10 days. Stay hydrated, get plenty of rest, and consider over-the-counter medications for symptom relief. If symptoms worsen or don't improve, it might be good to see a doctor. Would you like to schedule a consultation?\"\r\n    },\r\n    {\r\n      keywords: ['stomach', 'abdomen', 'pain', 'nausea', 'vomiting', 'diarrhea'],\r\n      response: \"Stomach issues can result from various causes including food poisoning, viruses, or digestive disorders. Ensure you stay hydrated. If symptoms are severe, persistent, or accompanied by fever, blood in stool, or intense pain, medical attention is recommended. Would you like to speak with a specialist?\"\r\n    },\r\n    {\r\n      keywords: ['rash', 'skin', 'itchy', 'bumps', 'hives'],\r\n      response: \"Skin rashes can be caused by allergies, infections, or other conditions. Avoid scratching and irritating the area. If the rash is widespread, painful, or accompanied by other symptoms like fever or difficulty breathing, you should consult a doctor. Would you like to see a dermatologist?\"\r\n    },\r\n    {\r\n      keywords: ['appointment', 'book', 'schedule', 'doctor', 'visit'],\r\n      response: \"I'd be happy to help you book an appointment. You can click on 'Book New Appointment' in your dashboard, or I can guide you to the right specialist based on your symptoms. What type of doctor would you like to see?\"\r\n    },\r\n    {\r\n      keywords: ['thank', 'thanks', 'appreciate', 'helpful'],\r\n      response: \"You're welcome! I'm here to help. Is there anything else you'd like to know about your health today?\"\r\n    }\r\n  ];\r\n\r\n  // Specialty recommendations based on symptoms\r\n  const specialtyRecommendations = {\r\n    headache: ['Neurology', 'General Physician'],\r\n    migraine: ['Neurology'],\r\n    fever: ['General Physician', 'Infectious Disease'],\r\n    cough: ['Pulmonology', 'General Physician'],\r\n    'chest pain': ['Cardiology', 'Emergency Medicine'],\r\n    'shortness of breath': ['Pulmonology', 'Cardiology'],\r\n    rash: ['Dermatology', 'Allergy and Immunology'],\r\n    'stomach pain': ['Gastroenterology', 'General Physician'],\r\n    nausea: ['Gastroenterology', 'General Physician'],\r\n    vomiting: ['Gastroenterology', 'Emergency Medicine'],\r\n    diarrhea: ['Gastroenterology'],\r\n    'joint pain': ['Rheumatology', 'Orthopedics'],\r\n    'back pain': ['Orthopedics', 'Neurology', 'Physical Therapy'],\r\n    'eye pain': ['Ophthalmology'],\r\n    'vision problems': ['Ophthalmology', 'Neurology'],\r\n    'ear pain': ['Otolaryngology (ENT)'],\r\n    'hearing loss': ['Otolaryngology (ENT)', 'Audiology'],\r\n    'sore throat': ['Otolaryngology (ENT)', 'General Physician'],\r\n    'urinary problems': ['Urology', 'Nephrology'],\r\n    depression: ['Psychiatry', 'Psychology'],\r\n    anxiety: ['Psychiatry', 'Psychology'],\r\n    'sleep problems': ['Sleep Medicine', 'Psychiatry'],\r\n    'high blood pressure': ['Cardiology', 'Internal Medicine'],\r\n    diabetes: ['Endocrinology', 'Internal Medicine'],\r\n    'pregnancy': ['Obstetrics and Gynecology']\r\n  };\r\n  \r\n  // Severity assessment questions\r\n  const severityQuestions = {\r\n    headache: [\r\n      \"Is this the worst headache of your life?\",\r\n      \"Are you experiencing any visual disturbances or difficulty speaking?\",\r\n      \"Is your headache accompanied by a stiff neck or fever?\"\r\n    ],\r\n    fever: [\r\n      \"How high is your temperature?\",\r\n      \"Is your fever accompanied by a rash?\",\r\n      \"Are you experiencing any difficulty breathing?\"\r\n    ],\r\n    cough: [\r\n      \"Are you coughing up blood?\",\r\n      \"Are you experiencing chest pain when coughing?\",\r\n      \"Have you been coughing for more than 2 weeks?\"\r\n    ],\r\n    'chest pain': [\r\n      \"Is the pain severe or crushing?\",\r\n      \"Does the pain radiate to your arm, jaw, or back?\",\r\n      \"Are you experiencing shortness of breath or sweating with the pain?\"\r\n    ]\r\n  };\r\n\r\n  // Handle sending a new message\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (input.trim() === '') return;\r\n\r\n    const newUserMessage = {\r\n      id: messages.length + 1,\r\n      text: input.trim(),\r\n      sender: 'user',\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, newUserMessage]);\r\n    setInput('');\r\n    setIsTyping(true);\r\n\r\n    // Simulate bot response after a short delay\r\n    setTimeout(() => {\r\n      const botResponse = generateResponse(input);\r\n      const newBotMessage = {\r\n        id: messages.length + 2,\r\n        text: botResponse,\r\n        sender: 'bot',\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      setMessages(prev => [...prev, newBotMessage]);\r\n      setIsTyping(false);\r\n      \r\n      if (!isChatOpen) {\r\n        setUnreadCount(prev => prev + 1);\r\n      }\r\n\r\n      // If the response includes a recommendation for emergency care, add a follow-up message\r\n      if (botResponse.includes(\"emergency\") || botResponse.includes(\"911\")) {\r\n        setTimeout(() => {\r\n          const emergencyFollowup = {\r\n            id: messages.length + 3,\r\n            text: \"If you're experiencing a medical emergency, please call emergency services immediately. Don't wait for an online response.\",\r\n            sender: 'bot',\r\n            timestamp: new Date(Date.now() + 1000)\r\n          };\r\n          setMessages(prev => [...prev, emergencyFollowup]);\r\n        }, 1000);\r\n      }\r\n      \r\n      // If response is about booking an appointment, provide specialty recommendations\r\n      else if (botResponse.includes(\"appointment\") || botResponse.includes(\"specialist\")) {\r\n        analyzeSymptoms(input);\r\n      }\r\n    }, 1000 + Math.random() * 1000);\r\n  };\r\n\r\n  // Analyze symptoms and recommend specialists\r\n  const analyzeSymptoms = (userInput) => {\r\n    const input = userInput.toLowerCase();\r\n    const detectedSymptoms = [];\r\n    \r\n    // Check for symptoms mentioned in the user input\r\n    Object.keys(specialtyRecommendations).forEach(symptom => {\r\n      if (input.includes(symptom)) {\r\n        detectedSymptoms.push(symptom);\r\n      }\r\n    });\r\n    \r\n    // If symptoms are detected, recommend specialists\r\n    if (detectedSymptoms.length > 0) {\r\n      // Get unique specialties across all detected symptoms\r\n      const recommendedSpecialties = new Set();\r\n      detectedSymptoms.forEach(symptom => {\r\n        specialtyRecommendations[symptom].forEach(specialty => {\r\n          recommendedSpecialties.add(specialty);\r\n        });\r\n      });\r\n      \r\n      // Check if any symptoms require severity assessment\r\n      const severityCheckNeeded = detectedSymptoms.some(symptom => severityQuestions[symptom]);\r\n      \r\n      setTimeout(() => {\r\n        // First, ask severity questions if needed\r\n        if (severityCheckNeeded) {\r\n          const symptomWithQuestions = detectedSymptoms.find(symptom => severityQuestions[symptom]);\r\n          const randomQuestion = severityQuestions[symptomWithQuestions][\r\n            Math.floor(Math.random() * severityQuestions[symptomWithQuestions].length)\r\n          ];\r\n          \r\n          const severityMessage = {\r\n            id: messages.length + 3,\r\n            text: `${randomQuestion} This will help me better understand the urgency of your situation.`,\r\n            sender: 'bot',\r\n            timestamp: new Date()\r\n          };\r\n          \r\n          setMessages(prev => [...prev, severityMessage]);\r\n        }\r\n        \r\n        // Then recommend specialists\r\n        setTimeout(() => {\r\n          const specialtiesArray = Array.from(recommendedSpecialties);\r\n          let recommendationText = `Based on your symptoms (${detectedSymptoms.join(', ')}), you might benefit from seeing a specialist in: ${specialtiesArray.join(', ')}. `;\r\n          \r\n          if (specialtiesArray.includes('Emergency Medicine')) {\r\n            recommendationText += \"Some of your symptoms may require immediate medical attention. Please consider seeking emergency care if your symptoms are severe.\";\r\n          } else {\r\n            recommendationText += \"Would you like to book an appointment with one of these specialists?\";\r\n          }\r\n          \r\n          const recommendationMessage = {\r\n            id: messages.length + 4,\r\n            text: recommendationText,\r\n            sender: 'bot',\r\n            timestamp: new Date()\r\n          };\r\n          \r\n          setMessages(prev => [...prev, recommendationMessage]);\r\n        }, severityCheckNeeded ? 2000 : 0);\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  // Generate a response based on user input\r\n  const generateResponse = (userInput) => {\r\n    const input = userInput.toLowerCase();\r\n    \r\n    // Check if input matches any keywords in our medical knowledge base\r\n    for (const item of medicalKnowledge) {\r\n      if (item.keywords.some(keyword => input.includes(keyword))) {\r\n        return item.response;\r\n      }\r\n    }\r\n    \r\n    // Default responses if no specific condition is matched\r\n    const defaultResponses = [\r\n      \"I understand you're concerned about your health. Could you provide more details about your symptoms?\",\r\n      \"Thanks for sharing that. Based on what you've described, it might be helpful to consult with a doctor. Would you like to book an appointment?\",\r\n      \"I'm here to help guide you, but for a proper diagnosis, you should speak with a healthcare professional. Can I help you schedule an appointment?\",\r\n      \"I'm not able to provide a specific diagnosis for your situation. Would you like me to help you connect with a doctor who can help?\",\r\n      \"Your health is important. While I can provide general information, a doctor can give you personalized advice. Would you like to book a consultation?\"\r\n    ];\r\n    \r\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n  };\r\n\r\n  // Scroll to bottom of messages\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Reset unread count when chat is opened\r\n  useEffect(() => {\r\n    if (isChatOpen) {\r\n      setUnreadCount(0);\r\n    }\r\n  }, [isChatOpen]);\r\n\r\n  // Format timestamp\r\n  const formatTime = (date) => {\r\n    return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  return (\r\n    <div className=\"doctor-chatbot\">\r\n      {/* Chat toggle button */}\r\n      <button \r\n        className=\"chat-toggle\"\r\n        onClick={() => setIsChatOpen(!isChatOpen)}\r\n      >\r\n        {isChatOpen ? (\r\n          <span className=\"close-icon\">×</span>\r\n        ) : (\r\n          <>\r\n            <span className=\"chat-icon\">👨‍⚕️</span>\r\n            <span>Dr. AI</span>\r\n            {unreadCount > 0 && (\r\n              <span className=\"unread-badge\">{unreadCount}</span>\r\n            )}\r\n          </>\r\n        )}\r\n      </button>\r\n      \r\n      {/* Chat window */}\r\n      {isChatOpen && (\r\n        <div className=\"chat-window\">\r\n          <div className=\"chat-header\">\r\n            <div className=\"chat-title\">\r\n              <span className=\"doctor-avatar\">👨‍⚕️</span>\r\n              <span className=\"doctor-name\">Dr. AI</span>\r\n              <span className=\"status-indicator\">●</span>\r\n            </div>\r\n            <p className=\"chat-subtitle\">Virtual Healthcare Assistant</p>\r\n          </div>\r\n          \r\n          <div className=\"messages-container\">\r\n            {messages.map(message => (\r\n              <div \r\n                key={message.id} \r\n                className={`message ${message.sender}`}\r\n              >\r\n                <div className=\"message-content\">\r\n                  <p>{message.text}</p>\r\n                  <span className=\"message-time\">\r\n                    {formatTime(message.timestamp)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            \r\n            {isTyping && (\r\n              <div className=\"message bot\">\r\n                <div className=\"message-content typing\">\r\n                  <span className=\"typing-indicator\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n          \r\n          <form className=\"chat-input\" onSubmit={handleSendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              placeholder=\"Type your health question here...\"\r\n              disabled={isTyping}\r\n            />\r\n            <button \r\n              type=\"submit\" \r\n              disabled={input.trim() === '' || isTyping}\r\n            >\r\n              <span className=\"send-icon\">➤</span>\r\n            </button>\r\n          </form>\r\n          \r\n          <div className=\"chat-disclaimer\">\r\n            <p>This is an AI assistant and not a replacement for professional medical advice. In case of emergency, call 911 or your local emergency number.</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorChatbot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}