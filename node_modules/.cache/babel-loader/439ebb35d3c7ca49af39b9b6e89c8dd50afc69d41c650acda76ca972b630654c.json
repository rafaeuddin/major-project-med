{"ast":null,"code":"import { http, HttpResponse } from 'msw';\n\n// Mock data for appointments\nconst mockAppointments = [{\n  _id: '1',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor456',\n    name: 'Dr. Sarah Parker',\n    specialization: 'Cardiology',\n    email: 'dr.parker@example.com'\n  },\n  date: new Date(Date.now() + 86400000 * 2).toISOString(),\n  // 2 days from now\n  timeSlot: '10:00 AM',\n  status: 'scheduled',\n  reason: 'Annual checkup',\n  notes: ''\n}, {\n  _id: '2',\n  patientId: {\n    _id: 'patient123',\n    name: 'Alex Johnson',\n    email: 'alex@example.com',\n    phone: '123-456-7890'\n  },\n  doctorId: {\n    _id: 'doctor789',\n    name: 'Dr. Michael Chen',\n    specialization: 'Neurology',\n    email: 'dr.chen@example.com'\n  },\n  date: new Date(Date.now() - 86400000 * 3).toISOString(),\n  // 3 days ago\n  timeSlot: '2:00 PM',\n  status: 'completed',\n  reason: 'Headaches and dizziness',\n  notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\n}];\n\n// Mock available time slots\nconst mockTimeSlots = {\n  availableTimeSlots: ['09:00 AM', '10:00 AM', '11:00 AM', '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM']\n};\n\n// Simple chatbot responses for common medical inquiries\nconst medicalResponses = {\n  headache: {\n    response: \"It sounds like you're experiencing headaches. Headaches can be caused by various factors including stress, dehydration, lack of sleep, or underlying medical conditions. If your headache is severe, persistent, or accompanied by other symptoms like fever, vision changes, or neck stiffness, you should consult with a doctor. Would you like to book an appointment?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"Neurologist\"\n  },\n  fever: {\n    response: \"I see you're concerned about a fever. A fever is often a sign that your body is fighting an infection. Make sure to stay hydrated and rest. If your temperature is above 103°F (39.4°C), lasts more than three days, or is accompanied by severe symptoms, you should seek medical attention. Would you like to discuss this with a doctor?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"General Physician\"\n  },\n  chest_pain: {\n    response: \"Chest pain can be a symptom of several conditions and should be taken seriously. If you're experiencing severe chest pain, especially if it radiates to your arm, jaw, or back, or is accompanied by shortness of breath, sweating, or nausea, please seek emergency medical care immediately by calling 911 or going to your nearest emergency room.\",\n    urgencyLevel: \"urgent\",\n    specialistRecommendation: \"Cardiologist\"\n  },\n  cough: {\n    response: \"Coughing can be caused by various factors including allergies, cold, flu, or respiratory infections. If your cough is persistent (lasting more than 2 weeks), produces discolored mucus, or is accompanied by shortness of breath, you should consult with a healthcare professional. Would you like me to help you book an appointment?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"Pulmonologist\"\n  },\n  default: {\n    response: \"Thank you for sharing your health concern. While I can provide general information, for a proper diagnosis and treatment plan, I'd recommend consulting with a healthcare professional. Would you like me to help you book an appointment with a doctor?\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: null\n  }\n};\n\n// Add to the medicalResponses object to include versions with patient history\nconst medicalResponsesWithHistory = {\n  headache: {\n    response: \"Based on your medical history, I see you've had previous appointments related to headaches. It's important to monitor any changes in your symptoms. Given your history, I would suggest keeping your scheduled follow-up appointment with your neurologist. In the meantime, continue with your prescribed medication and make sure you're staying hydrated and managing stress as discussed in your previous consultation.\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"Neurologist\",\n    hasPatientHistory: true\n  },\n  fever: {\n    response: \"I notice from your medical history that you have a history of recurring infections. With your current fever, it's especially important to monitor your temperature closely. Given your medical background, if your temperature exceeds 101°F or persists for more than 24 hours, you should contact your doctor as they may want to see you sooner considering your history. Continue taking your medications as prescribed.\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"General Physician\",\n    hasPatientHistory: true\n  },\n  chest_pain: {\n    response: \"Given your medical history that shows you have hypertension, your chest pain symptoms should be taken very seriously. Please seek emergency medical care immediately by calling 911 or going to your nearest emergency room. With your cardiovascular history, it's important to get evaluated promptly, even if the pain seems mild.\",\n    urgencyLevel: \"urgent\",\n    specialistRecommendation: \"Cardiologist\",\n    hasPatientHistory: true\n  },\n  cough: {\n    response: \"Looking at your medical history, I see you have asthma and have been prescribed an inhaler. With your current cough, it's important to monitor for any signs of an asthma flare-up. If you're experiencing increased wheezing or shortness of breath along with your cough, use your rescue inhaler as prescribed and contact your pulmonologist. They may want to adjust your management plan.\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: \"Pulmonologist\",\n    hasPatientHistory: true\n  },\n  default: {\n    response: \"I've reviewed your medical history and can provide some general guidance based on your health background. However, for your specific concerns, I'd recommend consulting with your healthcare provider who's familiar with your complete medical history. They can offer personalized advice based on your ongoing treatment plan.\",\n    urgencyLevel: \"normal\",\n    specialistRecommendation: null,\n    hasPatientHistory: true\n  }\n};\n\n// Mock data for medical records\nconst mockMedicalRecords = [{\n  _id: 'record1',\n  patientId: 'patient123',\n  recordType: 'diagnosis',\n  recordDate: new Date(Date.now() - 86400000 * 30).toISOString(),\n  // 30 days ago\n  description: 'Diagnosed with migraine headaches',\n  diagnosisDetails: {\n    condition: 'Migraine',\n    symptoms: ['Headache', 'Nausea', 'Light sensitivity'],\n    severity: 'moderate',\n    status: 'active'\n  },\n  createdBy: {\n    _id: 'doctor456',\n    name: 'Dr. Sarah Parker',\n    role: 'doctor',\n    specialization: 'Neurology'\n  }\n}, {\n  _id: 'record2',\n  patientId: 'patient123',\n  recordType: 'prescription',\n  recordDate: new Date(Date.now() - 86400000 * 29).toISOString(),\n  // 29 days ago\n  description: 'Prescribed medication for migraine prevention',\n  medicationDetails: {\n    name: 'Propranolol',\n    dosage: '40mg',\n    frequency: 'Twice daily',\n    startDate: new Date(Date.now() - 86400000 * 29).toISOString(),\n    endDate: new Date(Date.now() + 86400000 * 60).toISOString() // 60 days from now\n  },\n  createdBy: {\n    _id: 'doctor456',\n    name: 'Dr. Sarah Parker',\n    role: 'doctor',\n    specialization: 'Neurology'\n  }\n}, {\n  _id: 'record3',\n  patientId: 'patient123',\n  recordType: 'allergy',\n  recordDate: new Date(Date.now() - 86400000 * 100).toISOString(),\n  // 100 days ago\n  description: 'Identified penicillin allergy',\n  allergyDetails: {\n    allergen: 'Penicillin',\n    reaction: 'Hives and difficulty breathing',\n    severity: 'severe',\n    status: 'active'\n  },\n  createdBy: {\n    _id: 'doctor789',\n    name: 'Dr. Michael Chen',\n    role: 'doctor',\n    specialization: 'Immunology'\n  }\n}, {\n  _id: 'record4',\n  patientId: 'patient123',\n  recordType: 'labResult',\n  recordDate: new Date(Date.now() - 86400000 * 15).toISOString(),\n  // 15 days ago\n  description: 'Complete blood count results',\n  details: {\n    testName: 'Complete Blood Count',\n    results: 'Within normal ranges',\n    notes: 'No significant abnormalities found'\n  },\n  createdBy: {\n    _id: 'doctor456',\n    name: 'Dr. Sarah Parker',\n    role: 'doctor',\n    specialization: 'Neurology'\n  }\n}];\nexport const handlers = [\n// Auth handlers\nhttp.post('/api/auth/login', async ({\n  request\n}) => {\n  const {\n    email,\n    password\n  } = await request.json();\n\n  // Mock credentials check\n  if (email === 'doctor@example.com' && password === 'password') {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          _id: 'doctor123',\n          name: 'Dr. John Doe',\n          email: 'doctor@example.com',\n          role: 'doctor'\n        }\n      }\n    });\n  } else if (email === 'patient@example.com' && password === 'password') {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          _id: 'patient123',\n          name: 'Jane Smith',\n          email: 'patient@example.com',\n          role: 'patient'\n        }\n      }\n    });\n  } else {\n    return new HttpResponse(JSON.stringify({\n      success: false,\n      message: 'Invalid credentials'\n    }), {\n      status: 401\n    });\n  }\n}), http.get('/api/auth/me', () => {\n  // Return mock user data\n  return HttpResponse.json({\n    success: true,\n    data: {\n      _id: 'user123',\n      name: 'Mock User',\n      email: 'user@example.com',\n      role: 'patient'\n    }\n  });\n}),\n// Appointment handlers\nhttp.get('/api/appointments', () => {\n  return HttpResponse.json({\n    success: true,\n    data: [{\n      _id: 'appt1',\n      patientId: 'patient123',\n      patientName: 'Jane Smith',\n      doctorId: 'doctor123',\n      doctorName: 'Dr. John Doe',\n      date: '2023-09-15',\n      timeSlot: '10:00 AM',\n      status: 'scheduled',\n      reason: 'Annual checkup',\n      createdAt: '2023-09-01T10:00:00Z'\n    }, {\n      _id: 'appt2',\n      patientId: 'patient123',\n      patientName: 'Jane Smith',\n      doctorId: 'doctor456',\n      doctorName: 'Dr. Sarah Wilson',\n      date: '2023-08-20',\n      timeSlot: '2:00 PM',\n      status: 'completed',\n      reason: 'Follow-up',\n      notes: 'Patient is recovering well.',\n      createdAt: '2023-08-01T14:00:00Z'\n    }]\n  });\n}),\n// Handler for user appointments\nhttp.get('/api/appointments/user', () => {\n  return HttpResponse.json({\n    success: true,\n    appointments: mockAppointments\n  });\n}), http.post('/api/appointments', async ({\n  request\n}) => {\n  const appointment = await request.json();\n  return HttpResponse.json({\n    success: true,\n    data: {\n      _id: 'new-appt-id',\n      ...appointment,\n      status: 'scheduled',\n      createdAt: new Date().toISOString()\n    }\n  });\n}), http.delete('/api/appointments/:id', ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n  return HttpResponse.json({\n    success: true,\n    message: `Appointment ${id} cancelled successfully`\n  });\n}),\n// Doctors handlers\nhttp.get('/api/doctors', () => {\n  return HttpResponse.json({\n    success: true,\n    data: [{\n      _id: 'doctor123',\n      name: 'Dr. John Doe',\n      specialization: 'Cardiologist',\n      consultationFee: 150,\n      availableTimeSlots: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\n    }, {\n      _id: 'doctor456',\n      name: 'Dr. Sarah Wilson',\n      specialization: 'Dermatologist',\n      consultationFee: 120,\n      availableTimeSlots: ['9:30 AM', '10:30 AM', '11:30 AM', '2:30 PM', '3:30 PM']\n    }]\n  });\n}), http.get('/api/doctors/:id/timeslots', ({\n  params,\n  request\n}) => {\n  const {\n    id\n  } = params;\n  const url = new URL(request.url);\n  const date = url.searchParams.get('date');\n  return HttpResponse.json({\n    success: true,\n    data: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\n  });\n}),\n// Available slots endpoint\nhttp.get('/api/appointments/available-slots', ({\n  request\n}) => {\n  const url = new URL(request.url);\n  const date = url.searchParams.get('date');\n  const doctorId = url.searchParams.get('doctorId');\n  return HttpResponse.json({\n    success: true,\n    availableTimeSlots: mockTimeSlots.availableTimeSlots\n  });\n}),\n// Chatbot API endpoint handler\nhttp.post('/api/chatbot/message', async ({\n  request\n}) => {\n  const {\n    message,\n    conversationHistory\n  } = await request.json();\n\n  // Simple keyword-based response for the mock\n  const messageLower = message.toLowerCase();\n  let response;\n\n  // Randomly decide whether to show responses with patient history\n  const usePatientHistory = Math.random() > 0.5;\n  if (messageLower.includes('headache') || messageLower.includes('head pain') || messageLower.includes('migraine')) {\n    response = usePatientHistory ? medicalResponsesWithHistory.headache : medicalResponses.headache;\n  } else if (messageLower.includes('fever') || messageLower.includes('temperature') || messageLower.includes('hot')) {\n    response = usePatientHistory ? medicalResponsesWithHistory.fever : medicalResponses.fever;\n  } else if (messageLower.includes('chest pain') || messageLower.includes('heart pain')) {\n    response = usePatientHistory ? medicalResponsesWithHistory.chest_pain : medicalResponses.chest_pain;\n  } else if (messageLower.includes('cough') || messageLower.includes('cold') || messageLower.includes('flu')) {\n    response = usePatientHistory ? medicalResponsesWithHistory.cough : medicalResponses.cough;\n  } else {\n    response = usePatientHistory ? medicalResponsesWithHistory.default : medicalResponses.default;\n  }\n\n  // Add personalization based on conversation history if available\n  if (conversationHistory && conversationHistory.length > 0) {\n    // Find the user's name if mentioned in conversation\n    const nameMatch = conversationHistory.find(msg => msg.role === 'user' && msg.content.match(/my name is ([a-zA-Z]+)/i));\n    if (nameMatch) {\n      const name = nameMatch.content.match(/my name is ([a-zA-Z]+)/i)[1];\n      response.response = `Hi ${name}, ${response.response}`;\n    }\n  }\n  return HttpResponse.json({\n    success: true,\n    data: response\n  });\n}),\n// Medical records handlers\nhttp.get('/api/medical-records/patient/:id', ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n\n  // Filter records for the specific patient\n  const patientRecords = mockMedicalRecords.filter(record => record.patientId === id);\n  return HttpResponse.json({\n    success: true,\n    data: patientRecords\n  });\n}), http.get('/api/medical-records/summary/:id', ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n\n  // Filter records for the specific patient\n  const patientRecords = mockMedicalRecords.filter(record => record.patientId === id);\n\n  // Create a sample summary\n  const summary = {\n    patient: {\n      name: 'Jane Smith',\n      age: 35,\n      emergencyContact: {\n        name: 'John Smith',\n        phone: '555-123-4567',\n        relationship: 'Spouse'\n      }\n    },\n    activeConditions: patientRecords.filter(r => {\n      var _r$diagnosisDetails;\n      return r.recordType === 'diagnosis' && ((_r$diagnosisDetails = r.diagnosisDetails) === null || _r$diagnosisDetails === void 0 ? void 0 : _r$diagnosisDetails.status) === 'active';\n    }).map(c => {\n      var _c$diagnosisDetails, _c$diagnosisDetails2;\n      return {\n        condition: (_c$diagnosisDetails = c.diagnosisDetails) === null || _c$diagnosisDetails === void 0 ? void 0 : _c$diagnosisDetails.condition,\n        severity: (_c$diagnosisDetails2 = c.diagnosisDetails) === null || _c$diagnosisDetails2 === void 0 ? void 0 : _c$diagnosisDetails2.severity,\n        dateIdentified: c.recordDate\n      };\n    }),\n    allergies: patientRecords.filter(r => {\n      var _r$allergyDetails;\n      return r.recordType === 'allergy' && ((_r$allergyDetails = r.allergyDetails) === null || _r$allergyDetails === void 0 ? void 0 : _r$allergyDetails.status) === 'active';\n    }).map(a => {\n      var _a$allergyDetails, _a$allergyDetails2, _a$allergyDetails3;\n      return {\n        allergen: (_a$allergyDetails = a.allergyDetails) === null || _a$allergyDetails === void 0 ? void 0 : _a$allergyDetails.allergen,\n        reaction: (_a$allergyDetails2 = a.allergyDetails) === null || _a$allergyDetails2 === void 0 ? void 0 : _a$allergyDetails2.reaction,\n        severity: (_a$allergyDetails3 = a.allergyDetails) === null || _a$allergyDetails3 === void 0 ? void 0 : _a$allergyDetails3.severity\n      };\n    }),\n    currentMedications: patientRecords.filter(r => {\n      var _r$medicationDetails;\n      return r.recordType === 'prescription' && new Date((_r$medicationDetails = r.medicationDetails) === null || _r$medicationDetails === void 0 ? void 0 : _r$medicationDetails.endDate) > new Date();\n    }).map(m => {\n      var _m$medicationDetails, _m$medicationDetails2, _m$medicationDetails3;\n      return {\n        name: (_m$medicationDetails = m.medicationDetails) === null || _m$medicationDetails === void 0 ? void 0 : _m$medicationDetails.name,\n        dosage: (_m$medicationDetails2 = m.medicationDetails) === null || _m$medicationDetails2 === void 0 ? void 0 : _m$medicationDetails2.dosage,\n        frequency: (_m$medicationDetails3 = m.medicationDetails) === null || _m$medicationDetails3 === void 0 ? void 0 : _m$medicationDetails3.frequency\n      };\n    }),\n    recentAppointments: mockAppointments.map(a => {\n      var _a$doctorId, _a$doctorId2;\n      return {\n        date: a.date,\n        doctor: (_a$doctorId = a.doctorId) === null || _a$doctorId === void 0 ? void 0 : _a$doctorId.name,\n        specialization: (_a$doctorId2 = a.doctorId) === null || _a$doctorId2 === void 0 ? void 0 : _a$doctorId2.specialization,\n        reason: a.reason,\n        status: a.status,\n        notes: a.notes\n      };\n    })\n  };\n  return HttpResponse.json({\n    success: true,\n    data: summary\n  });\n}), http.get('/api/medical-records/:id', ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n\n  // Find the specific record\n  const record = mockMedicalRecords.find(record => record._id === id);\n  if (!record) {\n    return new HttpResponse(JSON.stringify({\n      success: false,\n      message: 'Medical record not found'\n    }), {\n      status: 404\n    });\n  }\n  return HttpResponse.json({\n    success: true,\n    data: record\n  });\n})];","map":{"version":3,"names":["http","HttpResponse","mockAppointments","_id","patientId","name","email","phone","doctorId","specialization","date","Date","now","toISOString","timeSlot","status","reason","notes","mockTimeSlots","availableTimeSlots","medicalResponses","headache","response","urgencyLevel","specialistRecommendation","fever","chest_pain","cough","default","medicalResponsesWithHistory","hasPatientHistory","mockMedicalRecords","recordType","recordDate","description","diagnosisDetails","condition","symptoms","severity","createdBy","role","medicationDetails","dosage","frequency","startDate","endDate","allergyDetails","allergen","reaction","details","testName","results","handlers","post","request","password","json","success","data","token","user","JSON","stringify","message","get","patientName","doctorName","createdAt","appointments","appointment","delete","params","id","consultationFee","url","URL","searchParams","conversationHistory","messageLower","toLowerCase","usePatientHistory","Math","random","includes","length","nameMatch","find","msg","content","match","patientRecords","filter","record","summary","patient","age","emergencyContact","relationship","activeConditions","r","_r$diagnosisDetails","map","c","_c$diagnosisDetails","_c$diagnosisDetails2","dateIdentified","allergies","_r$allergyDetails","a","_a$allergyDetails","_a$allergyDetails2","_a$allergyDetails3","currentMedications","_r$medicationDetails","m","_m$medicationDetails","_m$medicationDetails2","_m$medicationDetails3","recentAppointments","_a$doctorId","_a$doctorId2","doctor"],"sources":["C:/Users/mrafa/OneDrive/Desktop/code/major project/src/mocks/handlers.js"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\n\r\n// Mock data for appointments\r\nconst mockAppointments = [\r\n  {\r\n    _id: '1',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor456',\r\n      name: 'Dr. Sarah Parker',\r\n      specialization: 'Cardiology',\r\n      email: 'dr.parker@example.com'\r\n    },\r\n    date: new Date(Date.now() + 86400000 * 2).toISOString(), // 2 days from now\r\n    timeSlot: '10:00 AM',\r\n    status: 'scheduled',\r\n    reason: 'Annual checkup',\r\n    notes: ''\r\n  },\r\n  {\r\n    _id: '2',\r\n    patientId: {\r\n      _id: 'patient123',\r\n      name: 'Alex Johnson',\r\n      email: 'alex@example.com',\r\n      phone: '123-456-7890'\r\n    },\r\n    doctorId: {\r\n      _id: 'doctor789',\r\n      name: 'Dr. Michael Chen',\r\n      specialization: 'Neurology',\r\n      email: 'dr.chen@example.com'\r\n    },\r\n    date: new Date(Date.now() - 86400000 * 3).toISOString(), // 3 days ago\r\n    timeSlot: '2:00 PM',\r\n    status: 'completed',\r\n    reason: 'Headaches and dizziness',\r\n    notes: 'Patient reported recurring headaches. Prescribed medication and recommended follow-up in 2 weeks.'\r\n  }\r\n];\r\n\r\n// Mock available time slots\r\nconst mockTimeSlots = {\r\n  availableTimeSlots: [\r\n    '09:00 AM', '10:00 AM', '11:00 AM',\r\n    '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM'\r\n  ]\r\n};\r\n\r\n// Simple chatbot responses for common medical inquiries\r\nconst medicalResponses = {\r\n  headache: {\r\n    response: \"It sounds like you're experiencing headaches. Headaches can be caused by various factors including stress, dehydration, lack of sleep, or underlying medical conditions. If your headache is severe, persistent, or accompanied by other symptoms like fever, vision changes, or neck stiffness, you should consult with a doctor. Would you like to book an appointment?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"Neurologist\"\r\n  },\r\n  fever: {\r\n    response: \"I see you're concerned about a fever. A fever is often a sign that your body is fighting an infection. Make sure to stay hydrated and rest. If your temperature is above 103°F (39.4°C), lasts more than three days, or is accompanied by severe symptoms, you should seek medical attention. Would you like to discuss this with a doctor?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"General Physician\"\r\n  },\r\n  chest_pain: {\r\n    response: \"Chest pain can be a symptom of several conditions and should be taken seriously. If you're experiencing severe chest pain, especially if it radiates to your arm, jaw, or back, or is accompanied by shortness of breath, sweating, or nausea, please seek emergency medical care immediately by calling 911 or going to your nearest emergency room.\",\r\n    urgencyLevel: \"urgent\",\r\n    specialistRecommendation: \"Cardiologist\"\r\n  },\r\n  cough: {\r\n    response: \"Coughing can be caused by various factors including allergies, cold, flu, or respiratory infections. If your cough is persistent (lasting more than 2 weeks), produces discolored mucus, or is accompanied by shortness of breath, you should consult with a healthcare professional. Would you like me to help you book an appointment?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"Pulmonologist\"\r\n  },\r\n  default: {\r\n    response: \"Thank you for sharing your health concern. While I can provide general information, for a proper diagnosis and treatment plan, I'd recommend consulting with a healthcare professional. Would you like me to help you book an appointment with a doctor?\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: null\r\n  }\r\n};\r\n\r\n// Add to the medicalResponses object to include versions with patient history\r\nconst medicalResponsesWithHistory = {\r\n  headache: {\r\n    response: \"Based on your medical history, I see you've had previous appointments related to headaches. It's important to monitor any changes in your symptoms. Given your history, I would suggest keeping your scheduled follow-up appointment with your neurologist. In the meantime, continue with your prescribed medication and make sure you're staying hydrated and managing stress as discussed in your previous consultation.\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"Neurologist\",\r\n    hasPatientHistory: true\r\n  },\r\n  fever: {\r\n    response: \"I notice from your medical history that you have a history of recurring infections. With your current fever, it's especially important to monitor your temperature closely. Given your medical background, if your temperature exceeds 101°F or persists for more than 24 hours, you should contact your doctor as they may want to see you sooner considering your history. Continue taking your medications as prescribed.\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"General Physician\",\r\n    hasPatientHistory: true\r\n  },\r\n  chest_pain: {\r\n    response: \"Given your medical history that shows you have hypertension, your chest pain symptoms should be taken very seriously. Please seek emergency medical care immediately by calling 911 or going to your nearest emergency room. With your cardiovascular history, it's important to get evaluated promptly, even if the pain seems mild.\",\r\n    urgencyLevel: \"urgent\",\r\n    specialistRecommendation: \"Cardiologist\",\r\n    hasPatientHistory: true\r\n  },\r\n  cough: {\r\n    response: \"Looking at your medical history, I see you have asthma and have been prescribed an inhaler. With your current cough, it's important to monitor for any signs of an asthma flare-up. If you're experiencing increased wheezing or shortness of breath along with your cough, use your rescue inhaler as prescribed and contact your pulmonologist. They may want to adjust your management plan.\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: \"Pulmonologist\",\r\n    hasPatientHistory: true\r\n  },\r\n  default: {\r\n    response: \"I've reviewed your medical history and can provide some general guidance based on your health background. However, for your specific concerns, I'd recommend consulting with your healthcare provider who's familiar with your complete medical history. They can offer personalized advice based on your ongoing treatment plan.\",\r\n    urgencyLevel: \"normal\",\r\n    specialistRecommendation: null,\r\n    hasPatientHistory: true\r\n  }\r\n};\r\n\r\n// Mock data for medical records\r\nconst mockMedicalRecords = [\r\n  {\r\n    _id: 'record1',\r\n    patientId: 'patient123',\r\n    recordType: 'diagnosis',\r\n    recordDate: new Date(Date.now() - 86400000 * 30).toISOString(), // 30 days ago\r\n    description: 'Diagnosed with migraine headaches',\r\n    diagnosisDetails: {\r\n      condition: 'Migraine',\r\n      symptoms: ['Headache', 'Nausea', 'Light sensitivity'],\r\n      severity: 'moderate',\r\n      status: 'active'\r\n    },\r\n    createdBy: {\r\n      _id: 'doctor456',\r\n      name: 'Dr. Sarah Parker',\r\n      role: 'doctor',\r\n      specialization: 'Neurology'\r\n    }\r\n  },\r\n  {\r\n    _id: 'record2',\r\n    patientId: 'patient123',\r\n    recordType: 'prescription',\r\n    recordDate: new Date(Date.now() - 86400000 * 29).toISOString(), // 29 days ago\r\n    description: 'Prescribed medication for migraine prevention',\r\n    medicationDetails: {\r\n      name: 'Propranolol',\r\n      dosage: '40mg',\r\n      frequency: 'Twice daily',\r\n      startDate: new Date(Date.now() - 86400000 * 29).toISOString(),\r\n      endDate: new Date(Date.now() + 86400000 * 60).toISOString() // 60 days from now\r\n    },\r\n    createdBy: {\r\n      _id: 'doctor456',\r\n      name: 'Dr. Sarah Parker',\r\n      role: 'doctor',\r\n      specialization: 'Neurology'\r\n    }\r\n  },\r\n  {\r\n    _id: 'record3',\r\n    patientId: 'patient123',\r\n    recordType: 'allergy',\r\n    recordDate: new Date(Date.now() - 86400000 * 100).toISOString(), // 100 days ago\r\n    description: 'Identified penicillin allergy',\r\n    allergyDetails: {\r\n      allergen: 'Penicillin',\r\n      reaction: 'Hives and difficulty breathing',\r\n      severity: 'severe',\r\n      status: 'active'\r\n    },\r\n    createdBy: {\r\n      _id: 'doctor789',\r\n      name: 'Dr. Michael Chen',\r\n      role: 'doctor',\r\n      specialization: 'Immunology'\r\n    }\r\n  },\r\n  {\r\n    _id: 'record4',\r\n    patientId: 'patient123',\r\n    recordType: 'labResult',\r\n    recordDate: new Date(Date.now() - 86400000 * 15).toISOString(), // 15 days ago\r\n    description: 'Complete blood count results',\r\n    details: {\r\n      testName: 'Complete Blood Count',\r\n      results: 'Within normal ranges',\r\n      notes: 'No significant abnormalities found'\r\n    },\r\n    createdBy: {\r\n      _id: 'doctor456',\r\n      name: 'Dr. Sarah Parker',\r\n      role: 'doctor',\r\n      specialization: 'Neurology'\r\n    }\r\n  }\r\n];\r\n\r\nexport const handlers = [\r\n  // Auth handlers\r\n  http.post('/api/auth/login', async ({ request }) => {\r\n    const { email, password } = await request.json()\r\n    \r\n    // Mock credentials check\r\n    if (email === 'doctor@example.com' && password === 'password') {\r\n      return HttpResponse.json({\r\n        success: true,\r\n        data: {\r\n          token: 'mock-jwt-token',\r\n          user: {\r\n            _id: 'doctor123',\r\n            name: 'Dr. John Doe',\r\n            email: 'doctor@example.com',\r\n            role: 'doctor'\r\n          }\r\n        }\r\n      })\r\n    } else if (email === 'patient@example.com' && password === 'password') {\r\n      return HttpResponse.json({\r\n        success: true,\r\n        data: {\r\n          token: 'mock-jwt-token',\r\n          user: {\r\n            _id: 'patient123',\r\n            name: 'Jane Smith',\r\n            email: 'patient@example.com',\r\n            role: 'patient'\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      return new HttpResponse(\r\n        JSON.stringify({\r\n          success: false,\r\n          message: 'Invalid credentials'\r\n        }),\r\n        { status: 401 }\r\n      )\r\n    }\r\n  }),\r\n\r\n  http.get('/api/auth/me', () => {\r\n    // Return mock user data\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: {\r\n        _id: 'user123',\r\n        name: 'Mock User',\r\n        email: 'user@example.com',\r\n        role: 'patient'\r\n      }\r\n    })\r\n  }),\r\n\r\n  // Appointment handlers\r\n  http.get('/api/appointments', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: [\r\n        {\r\n          _id: 'appt1',\r\n          patientId: 'patient123',\r\n          patientName: 'Jane Smith',\r\n          doctorId: 'doctor123',\r\n          doctorName: 'Dr. John Doe',\r\n          date: '2023-09-15',\r\n          timeSlot: '10:00 AM',\r\n          status: 'scheduled',\r\n          reason: 'Annual checkup',\r\n          createdAt: '2023-09-01T10:00:00Z'\r\n        },\r\n        {\r\n          _id: 'appt2',\r\n          patientId: 'patient123',\r\n          patientName: 'Jane Smith',\r\n          doctorId: 'doctor456',\r\n          doctorName: 'Dr. Sarah Wilson',\r\n          date: '2023-08-20',\r\n          timeSlot: '2:00 PM',\r\n          status: 'completed',\r\n          reason: 'Follow-up',\r\n          notes: 'Patient is recovering well.',\r\n          createdAt: '2023-08-01T14:00:00Z'\r\n        }\r\n      ]\r\n    })\r\n  }),\r\n\r\n  // Handler for user appointments\r\n  http.get('/api/appointments/user', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      appointments: mockAppointments \r\n    });\r\n  }),\r\n\r\n  http.post('/api/appointments', async ({ request }) => {\r\n    const appointment = await request.json()\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: {\r\n        _id: 'new-appt-id',\r\n        ...appointment,\r\n        status: 'scheduled',\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    })\r\n  }),\r\n\r\n  http.delete('/api/appointments/:id', ({ params }) => {\r\n    const { id } = params\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      message: `Appointment ${id} cancelled successfully`\r\n    })\r\n  }),\r\n\r\n  // Doctors handlers\r\n  http.get('/api/doctors', () => {\r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: [\r\n        {\r\n          _id: 'doctor123',\r\n          name: 'Dr. John Doe',\r\n          specialization: 'Cardiologist',\r\n          consultationFee: 150,\r\n          availableTimeSlots: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\r\n        },\r\n        {\r\n          _id: 'doctor456',\r\n          name: 'Dr. Sarah Wilson',\r\n          specialization: 'Dermatologist',\r\n          consultationFee: 120,\r\n          availableTimeSlots: ['9:30 AM', '10:30 AM', '11:30 AM', '2:30 PM', '3:30 PM']\r\n        }\r\n      ]\r\n    })\r\n  }),\r\n\r\n  http.get('/api/doctors/:id/timeslots', ({ params, request }) => {\r\n    const { id } = params\r\n    const url = new URL(request.url)\r\n    const date = url.searchParams.get('date')\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM']\r\n    })\r\n  }),\r\n\r\n  // Available slots endpoint\r\n  http.get('/api/appointments/available-slots', ({ request }) => {\r\n    const url = new URL(request.url)\r\n    const date = url.searchParams.get('date')\r\n    const doctorId = url.searchParams.get('doctorId')\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      availableTimeSlots: mockTimeSlots.availableTimeSlots\r\n    })\r\n  }),\r\n\r\n  // Chatbot API endpoint handler\r\n  http.post('/api/chatbot/message', async ({ request }) => {\r\n    const { message, conversationHistory } = await request.json();\r\n    \r\n    // Simple keyword-based response for the mock\r\n    const messageLower = message.toLowerCase();\r\n    let response;\r\n    \r\n    // Randomly decide whether to show responses with patient history\r\n    const usePatientHistory = Math.random() > 0.5;\r\n    \r\n    if (messageLower.includes('headache') || messageLower.includes('head pain') || messageLower.includes('migraine')) {\r\n      response = usePatientHistory ? medicalResponsesWithHistory.headache : medicalResponses.headache;\r\n    } else if (messageLower.includes('fever') || messageLower.includes('temperature') || messageLower.includes('hot')) {\r\n      response = usePatientHistory ? medicalResponsesWithHistory.fever : medicalResponses.fever;\r\n    } else if (messageLower.includes('chest pain') || messageLower.includes('heart pain')) {\r\n      response = usePatientHistory ? medicalResponsesWithHistory.chest_pain : medicalResponses.chest_pain;\r\n    } else if (messageLower.includes('cough') || messageLower.includes('cold') || messageLower.includes('flu')) {\r\n      response = usePatientHistory ? medicalResponsesWithHistory.cough : medicalResponses.cough;\r\n    } else {\r\n      response = usePatientHistory ? medicalResponsesWithHistory.default : medicalResponses.default;\r\n    }\r\n    \r\n    // Add personalization based on conversation history if available\r\n    if (conversationHistory && conversationHistory.length > 0) {\r\n      // Find the user's name if mentioned in conversation\r\n      const nameMatch = conversationHistory.find(msg => \r\n        msg.role === 'user' && \r\n        msg.content.match(/my name is ([a-zA-Z]+)/i)\r\n      );\r\n      \r\n      if (nameMatch) {\r\n        const name = nameMatch.content.match(/my name is ([a-zA-Z]+)/i)[1];\r\n        response.response = `Hi ${name}, ${response.response}`;\r\n      }\r\n    }\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: response\r\n    });\r\n  }),\r\n\r\n  // Medical records handlers\r\n  http.get('/api/medical-records/patient/:id', ({ params }) => {\r\n    const { id } = params;\r\n    \r\n    // Filter records for the specific patient\r\n    const patientRecords = mockMedicalRecords.filter(record => record.patientId === id);\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: patientRecords\r\n    });\r\n  }),\r\n\r\n  http.get('/api/medical-records/summary/:id', ({ params }) => {\r\n    const { id } = params;\r\n    \r\n    // Filter records for the specific patient\r\n    const patientRecords = mockMedicalRecords.filter(record => record.patientId === id);\r\n    \r\n    // Create a sample summary\r\n    const summary = {\r\n      patient: {\r\n        name: 'Jane Smith',\r\n        age: 35,\r\n        emergencyContact: {\r\n          name: 'John Smith',\r\n          phone: '555-123-4567',\r\n          relationship: 'Spouse'\r\n        }\r\n      },\r\n      activeConditions: patientRecords\r\n        .filter(r => r.recordType === 'diagnosis' && r.diagnosisDetails?.status === 'active')\r\n        .map(c => ({\r\n          condition: c.diagnosisDetails?.condition,\r\n          severity: c.diagnosisDetails?.severity,\r\n          dateIdentified: c.recordDate\r\n        })),\r\n      allergies: patientRecords\r\n        .filter(r => r.recordType === 'allergy' && r.allergyDetails?.status === 'active')\r\n        .map(a => ({\r\n          allergen: a.allergyDetails?.allergen,\r\n          reaction: a.allergyDetails?.reaction,\r\n          severity: a.allergyDetails?.severity\r\n        })),\r\n      currentMedications: patientRecords\r\n        .filter(r => r.recordType === 'prescription' && new Date(r.medicationDetails?.endDate) > new Date())\r\n        .map(m => ({\r\n          name: m.medicationDetails?.name,\r\n          dosage: m.medicationDetails?.dosage,\r\n          frequency: m.medicationDetails?.frequency\r\n        })),\r\n      recentAppointments: mockAppointments.map(a => ({\r\n        date: a.date,\r\n        doctor: a.doctorId?.name,\r\n        specialization: a.doctorId?.specialization,\r\n        reason: a.reason,\r\n        status: a.status,\r\n        notes: a.notes\r\n      }))\r\n    };\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: summary\r\n    });\r\n  }),\r\n\r\n  http.get('/api/medical-records/:id', ({ params }) => {\r\n    const { id } = params;\r\n    \r\n    // Find the specific record\r\n    const record = mockMedicalRecords.find(record => record._id === id);\r\n    \r\n    if (!record) {\r\n      return new HttpResponse(\r\n        JSON.stringify({\r\n          success: false,\r\n          message: 'Medical record not found'\r\n        }),\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return HttpResponse.json({\r\n      success: true,\r\n      data: record\r\n    });\r\n  })\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}